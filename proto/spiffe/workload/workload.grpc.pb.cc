// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: workload.proto

#include "workload.pb.h"
#include "workload.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* SpiffeWorkloadAPI_method_names[] = {
  "/SpiffeWorkloadAPI/FetchJWTSVID",
  "/SpiffeWorkloadAPI/FetchJWTBundles",
  "/SpiffeWorkloadAPI/ValidateJWTSVID",
  "/SpiffeWorkloadAPI/FetchX509SVID",
};

std::unique_ptr< SpiffeWorkloadAPI::Stub> SpiffeWorkloadAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpiffeWorkloadAPI::Stub> stub(new SpiffeWorkloadAPI::Stub(channel));
  return stub;
}

SpiffeWorkloadAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FetchJWTSVID_(SpiffeWorkloadAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchJWTBundles_(SpiffeWorkloadAPI_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ValidateJWTSVID_(SpiffeWorkloadAPI_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchX509SVID_(SpiffeWorkloadAPI_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status SpiffeWorkloadAPI::Stub::FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::JWTSVIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FetchJWTSVID_, context, request, response);
}

void SpiffeWorkloadAPI::Stub::experimental_async::FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FetchJWTSVID_, context, request, response, std::move(f));
}

void SpiffeWorkloadAPI::Stub::experimental_async::FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FetchJWTSVID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>* SpiffeWorkloadAPI::Stub::PrepareAsyncFetchJWTSVIDRaw(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::JWTSVIDResponse>::Create(channel_.get(), cq, rpcmethod_FetchJWTSVID_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>* SpiffeWorkloadAPI::Stub::AsyncFetchJWTSVIDRaw(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchJWTSVIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::JWTBundlesResponse>* SpiffeWorkloadAPI::Stub::FetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::JWTBundlesResponse>::Create(channel_.get(), rpcmethod_FetchJWTBundles_, context, request);
}

void SpiffeWorkloadAPI::Stub::experimental_async::FetchJWTBundles(::grpc::ClientContext* context, ::JWTBundlesRequest* request, ::grpc::experimental::ClientReadReactor< ::JWTBundlesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::JWTBundlesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_FetchJWTBundles_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::JWTBundlesResponse>* SpiffeWorkloadAPI::Stub::AsyncFetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::JWTBundlesResponse>::Create(channel_.get(), cq, rpcmethod_FetchJWTBundles_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::JWTBundlesResponse>* SpiffeWorkloadAPI::Stub::PrepareAsyncFetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::JWTBundlesResponse>::Create(channel_.get(), cq, rpcmethod_FetchJWTBundles_, context, request, false, nullptr);
}

::grpc::Status SpiffeWorkloadAPI::Stub::ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::ValidateJWTSVIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ValidateJWTSVID_, context, request, response);
}

void SpiffeWorkloadAPI::Stub::experimental_async::ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateJWTSVID_, context, request, response, std::move(f));
}

void SpiffeWorkloadAPI::Stub::experimental_async::ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateJWTSVID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>* SpiffeWorkloadAPI::Stub::PrepareAsyncValidateJWTSVIDRaw(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ValidateJWTSVIDResponse>::Create(channel_.get(), cq, rpcmethod_ValidateJWTSVID_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>* SpiffeWorkloadAPI::Stub::AsyncValidateJWTSVIDRaw(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateJWTSVIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::X509SVIDResponse>* SpiffeWorkloadAPI::Stub::FetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::X509SVIDResponse>::Create(channel_.get(), rpcmethod_FetchX509SVID_, context, request);
}

void SpiffeWorkloadAPI::Stub::experimental_async::FetchX509SVID(::grpc::ClientContext* context, ::X509SVIDRequest* request, ::grpc::experimental::ClientReadReactor< ::X509SVIDResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::X509SVIDResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_FetchX509SVID_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::X509SVIDResponse>* SpiffeWorkloadAPI::Stub::AsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::X509SVIDResponse>::Create(channel_.get(), cq, rpcmethod_FetchX509SVID_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::X509SVIDResponse>* SpiffeWorkloadAPI::Stub::PrepareAsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::X509SVIDResponse>::Create(channel_.get(), cq, rpcmethod_FetchX509SVID_, context, request, false, nullptr);
}

SpiffeWorkloadAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpiffeWorkloadAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpiffeWorkloadAPI::Service, ::JWTSVIDRequest, ::JWTSVIDResponse>(
          [](SpiffeWorkloadAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::JWTSVIDRequest* req,
             ::JWTSVIDResponse* resp) {
               return service->FetchJWTSVID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpiffeWorkloadAPI_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SpiffeWorkloadAPI::Service, ::JWTBundlesRequest, ::JWTBundlesResponse>(
          [](SpiffeWorkloadAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::JWTBundlesRequest* req,
             ::grpc::ServerWriter<::JWTBundlesResponse>* writer) {
               return service->FetchJWTBundles(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpiffeWorkloadAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpiffeWorkloadAPI::Service, ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>(
          [](SpiffeWorkloadAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ValidateJWTSVIDRequest* req,
             ::ValidateJWTSVIDResponse* resp) {
               return service->ValidateJWTSVID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpiffeWorkloadAPI_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SpiffeWorkloadAPI::Service, ::X509SVIDRequest, ::X509SVIDResponse>(
          [](SpiffeWorkloadAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::X509SVIDRequest* req,
             ::grpc::ServerWriter<::X509SVIDResponse>* writer) {
               return service->FetchX509SVID(ctx, req, writer);
             }, this)));
}

SpiffeWorkloadAPI::Service::~Service() {
}

::grpc::Status SpiffeWorkloadAPI::Service::FetchJWTSVID(::grpc::ServerContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpiffeWorkloadAPI::Service::FetchJWTBundles(::grpc::ServerContext* context, const ::JWTBundlesRequest* request, ::grpc::ServerWriter< ::JWTBundlesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpiffeWorkloadAPI::Service::ValidateJWTSVID(::grpc::ServerContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpiffeWorkloadAPI::Service::FetchX509SVID(::grpc::ServerContext* context, const ::X509SVIDRequest* request, ::grpc::ServerWriter< ::X509SVIDResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


