// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workload.proto

#include "workload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_workload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JWTBundlesResponse_BundlesEntry_DoNotUse_workload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_workload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JWTSVID_workload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_workload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_X509SVID_workload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_workload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_workload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
class X509SVIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<X509SVIDRequest> _instance;
} _X509SVIDRequest_default_instance_;
class X509SVIDResponse_FederatedBundlesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<X509SVIDResponse_FederatedBundlesEntry_DoNotUse> _instance;
} _X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_;
class X509SVIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<X509SVIDResponse> _instance;
} _X509SVIDResponse_default_instance_;
class X509SVIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<X509SVID> _instance;
} _X509SVID_default_instance_;
class JWTSVIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JWTSVID> _instance;
} _JWTSVID_default_instance_;
class JWTSVIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JWTSVIDRequest> _instance;
} _JWTSVIDRequest_default_instance_;
class JWTSVIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JWTSVIDResponse> _instance;
} _JWTSVIDResponse_default_instance_;
class JWTBundlesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JWTBundlesRequest> _instance;
} _JWTBundlesRequest_default_instance_;
class JWTBundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JWTBundlesResponse_BundlesEntry_DoNotUse> _instance;
} _JWTBundlesResponse_BundlesEntry_DoNotUse_default_instance_;
class JWTBundlesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JWTBundlesResponse> _instance;
} _JWTBundlesResponse_default_instance_;
class ValidateJWTSVIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateJWTSVIDRequest> _instance;
} _ValidateJWTSVIDRequest_default_instance_;
class ValidateJWTSVIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateJWTSVIDResponse> _instance;
} _ValidateJWTSVIDResponse_default_instance_;
static void InitDefaultsscc_info_JWTBundlesRequest_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JWTBundlesRequest_default_instance_;
    new (ptr) ::JWTBundlesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JWTBundlesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JWTBundlesRequest_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JWTBundlesRequest_workload_2eproto}, {}};

static void InitDefaultsscc_info_JWTBundlesResponse_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JWTBundlesResponse_default_instance_;
    new (ptr) ::JWTBundlesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JWTBundlesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JWTBundlesResponse_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JWTBundlesResponse_workload_2eproto}, {
      &scc_info_JWTBundlesResponse_BundlesEntry_DoNotUse_workload_2eproto.base,}};

static void InitDefaultsscc_info_JWTBundlesResponse_BundlesEntry_DoNotUse_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JWTBundlesResponse_BundlesEntry_DoNotUse_default_instance_;
    new (ptr) ::JWTBundlesResponse_BundlesEntry_DoNotUse();
  }
  ::JWTBundlesResponse_BundlesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JWTBundlesResponse_BundlesEntry_DoNotUse_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JWTBundlesResponse_BundlesEntry_DoNotUse_workload_2eproto}, {}};

static void InitDefaultsscc_info_JWTSVID_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JWTSVID_default_instance_;
    new (ptr) ::JWTSVID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JWTSVID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JWTSVID_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JWTSVID_workload_2eproto}, {}};

static void InitDefaultsscc_info_JWTSVIDRequest_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JWTSVIDRequest_default_instance_;
    new (ptr) ::JWTSVIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JWTSVIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JWTSVIDRequest_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JWTSVIDRequest_workload_2eproto}, {}};

static void InitDefaultsscc_info_JWTSVIDResponse_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JWTSVIDResponse_default_instance_;
    new (ptr) ::JWTSVIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JWTSVIDResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JWTSVIDResponse_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JWTSVIDResponse_workload_2eproto}, {
      &scc_info_JWTSVID_workload_2eproto.base,}};

static void InitDefaultsscc_info_ValidateJWTSVIDRequest_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ValidateJWTSVIDRequest_default_instance_;
    new (ptr) ::ValidateJWTSVIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ValidateJWTSVIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidateJWTSVIDRequest_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidateJWTSVIDRequest_workload_2eproto}, {}};

static void InitDefaultsscc_info_ValidateJWTSVIDResponse_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ValidateJWTSVIDResponse_default_instance_;
    new (ptr) ::ValidateJWTSVIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ValidateJWTSVIDResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidateJWTSVIDResponse_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidateJWTSVIDResponse_workload_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_X509SVID_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_X509SVID_default_instance_;
    new (ptr) ::X509SVID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::X509SVID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_X509SVID_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_X509SVID_workload_2eproto}, {}};

static void InitDefaultsscc_info_X509SVIDRequest_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_X509SVIDRequest_default_instance_;
    new (ptr) ::X509SVIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::X509SVIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_X509SVIDRequest_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_X509SVIDRequest_workload_2eproto}, {}};

static void InitDefaultsscc_info_X509SVIDResponse_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_X509SVIDResponse_default_instance_;
    new (ptr) ::X509SVIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::X509SVIDResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_X509SVIDResponse_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_X509SVIDResponse_workload_2eproto}, {
      &scc_info_X509SVID_workload_2eproto.base,
      &scc_info_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_workload_2eproto.base,}};

static void InitDefaultsscc_info_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_workload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_;
    new (ptr) ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse();
  }
  ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_workload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_workload_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_workload_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_workload_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_workload_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_workload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::X509SVIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse, svids_),
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse, crl_),
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse, federated_bundles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::X509SVID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::X509SVID, spiffe_id_),
  PROTOBUF_FIELD_OFFSET(::X509SVID, x509_svid_),
  PROTOBUF_FIELD_OFFSET(::X509SVID, x509_svid_key_),
  PROTOBUF_FIELD_OFFSET(::X509SVID, bundle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JWTSVID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JWTSVID, spiffe_id_),
  PROTOBUF_FIELD_OFFSET(::JWTSVID, svid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JWTSVIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JWTSVIDRequest, audience_),
  PROTOBUF_FIELD_OFFSET(::JWTSVIDRequest, spiffe_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JWTSVIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JWTSVIDResponse, svids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JWTBundlesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse_BundlesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse_BundlesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse_BundlesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse_BundlesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse, bundles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDRequest, audience_),
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDRequest, svid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDResponse, spiffe_id_),
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDResponse, claims_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::X509SVIDRequest)},
  { 5, 12, sizeof(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse)},
  { 14, -1, sizeof(::X509SVIDResponse)},
  { 22, -1, sizeof(::X509SVID)},
  { 31, -1, sizeof(::JWTSVID)},
  { 38, -1, sizeof(::JWTSVIDRequest)},
  { 45, -1, sizeof(::JWTSVIDResponse)},
  { 51, -1, sizeof(::JWTBundlesRequest)},
  { 56, 63, sizeof(::JWTBundlesResponse_BundlesEntry_DoNotUse)},
  { 65, -1, sizeof(::JWTBundlesResponse)},
  { 71, -1, sizeof(::ValidateJWTSVIDRequest)},
  { 78, -1, sizeof(::ValidateJWTSVIDResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_X509SVIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_X509SVIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_X509SVID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JWTSVID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JWTSVIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JWTSVIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JWTBundlesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JWTBundlesResponse_BundlesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JWTBundlesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ValidateJWTSVIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ValidateJWTSVIDResponse_default_instance_),
};

const char descriptor_table_protodef_workload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016workload.proto\032\034google/protobuf/struct"
  ".proto\"\021\n\017X509SVIDRequest\"\266\001\n\020X509SVIDRe"
  "sponse\022\030\n\005svids\030\001 \003(\0132\t.X509SVID\022\013\n\003crl\030"
  "\002 \003(\014\022B\n\021federated_bundles\030\003 \003(\0132\'.X509S"
  "VIDResponse.FederatedBundlesEntry\0327\n\025Fed"
  "eratedBundlesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\014:\0028\001\"W\n\010X509SVID\022\021\n\tspiffe_id\030\001 \001("
  "\t\022\021\n\tx509_svid\030\002 \001(\014\022\025\n\rx509_svid_key\030\003 "
  "\001(\014\022\016\n\006bundle\030\004 \001(\014\"*\n\007JWTSVID\022\021\n\tspiffe"
  "_id\030\001 \001(\t\022\014\n\004svid\030\002 \001(\t\"5\n\016JWTSVIDReques"
  "t\022\020\n\010audience\030\001 \003(\t\022\021\n\tspiffe_id\030\002 \001(\t\"*"
  "\n\017JWTSVIDResponse\022\027\n\005svids\030\001 \003(\0132\010.JWTSV"
  "ID\"\023\n\021JWTBundlesRequest\"w\n\022JWTBundlesRes"
  "ponse\0221\n\007bundles\030\001 \003(\0132 .JWTBundlesRespo"
  "nse.BundlesEntry\032.\n\014BundlesEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"8\n\026ValidateJWTS"
  "VIDRequest\022\020\n\010audience\030\001 \001(\t\022\014\n\004svid\030\002 \001"
  "(\t\"U\n\027ValidateJWTSVIDResponse\022\021\n\tspiffe_"
  "id\030\001 \001(\t\022\'\n\006claims\030\002 \001(\0132\027.google.protob"
  "uf.Struct2\202\002\n\021SpiffeWorkloadAPI\0221\n\014Fetch"
  "JWTSVID\022\017.JWTSVIDRequest\032\020.JWTSVIDRespon"
  "se\022<\n\017FetchJWTBundles\022\022.JWTBundlesReques"
  "t\032\023.JWTBundlesResponse0\001\022D\n\017ValidateJWTS"
  "VID\022\027.ValidateJWTSVIDRequest\032\030.ValidateJ"
  "WTSVIDResponse\0226\n\rFetchX509SVID\022\020.X509SV"
  "IDRequest\032\021.X509SVIDResponse0\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_workload_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_workload_2eproto_sccs[12] = {
  &scc_info_JWTBundlesRequest_workload_2eproto.base,
  &scc_info_JWTBundlesResponse_workload_2eproto.base,
  &scc_info_JWTBundlesResponse_BundlesEntry_DoNotUse_workload_2eproto.base,
  &scc_info_JWTSVID_workload_2eproto.base,
  &scc_info_JWTSVIDRequest_workload_2eproto.base,
  &scc_info_JWTSVIDResponse_workload_2eproto.base,
  &scc_info_ValidateJWTSVIDRequest_workload_2eproto.base,
  &scc_info_ValidateJWTSVIDResponse_workload_2eproto.base,
  &scc_info_X509SVID_workload_2eproto.base,
  &scc_info_X509SVIDRequest_workload_2eproto.base,
  &scc_info_X509SVIDResponse_workload_2eproto.base,
  &scc_info_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_workload_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_workload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_workload_2eproto = {
  false, false, descriptor_table_protodef_workload_2eproto, "workload.proto", 1038,
  &descriptor_table_workload_2eproto_once, descriptor_table_workload_2eproto_sccs, descriptor_table_workload_2eproto_deps, 12, 1,
  schemas, file_default_instances, TableStruct_workload_2eproto::offsets,
  file_level_metadata_workload_2eproto, 12, file_level_enum_descriptors_workload_2eproto, file_level_service_descriptors_workload_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_workload_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_workload_2eproto)), true);

// ===================================================================

void X509SVIDRequest::InitAsDefaultInstance() {
}
class X509SVIDRequest::_Internal {
 public:
};

X509SVIDRequest::X509SVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:X509SVIDRequest)
}
X509SVIDRequest::X509SVIDRequest(const X509SVIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:X509SVIDRequest)
}

void X509SVIDRequest::SharedCtor() {
}

X509SVIDRequest::~X509SVIDRequest() {
  // @@protoc_insertion_point(destructor:X509SVIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void X509SVIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void X509SVIDRequest::ArenaDtor(void* object) {
  X509SVIDRequest* _this = reinterpret_cast< X509SVIDRequest* >(object);
  (void)_this;
}
void X509SVIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void X509SVIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const X509SVIDRequest& X509SVIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_X509SVIDRequest_workload_2eproto.base);
  return *internal_default_instance();
}


void X509SVIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:X509SVIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* X509SVIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* X509SVIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:X509SVIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:X509SVIDRequest)
  return target;
}

size_t X509SVIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:X509SVIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void X509SVIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:X509SVIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const X509SVIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<X509SVIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:X509SVIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:X509SVIDRequest)
    MergeFrom(*source);
  }
}

void X509SVIDRequest::MergeFrom(const X509SVIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:X509SVIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void X509SVIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:X509SVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X509SVIDRequest::CopyFrom(const X509SVIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:X509SVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509SVIDRequest::IsInitialized() const {
  return true;
}

void X509SVIDRequest::InternalSwap(X509SVIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata X509SVIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

X509SVIDResponse_FederatedBundlesEntry_DoNotUse::X509SVIDResponse_FederatedBundlesEntry_DoNotUse() {}
X509SVIDResponse_FederatedBundlesEntry_DoNotUse::X509SVIDResponse_FederatedBundlesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void X509SVIDResponse_FederatedBundlesEntry_DoNotUse::MergeFrom(const X509SVIDResponse_FederatedBundlesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata X509SVIDResponse_FederatedBundlesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void X509SVIDResponse_FederatedBundlesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void X509SVIDResponse::InitAsDefaultInstance() {
}
class X509SVIDResponse::_Internal {
 public:
};

X509SVIDResponse::X509SVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  svids_(arena),
  crl_(arena),
  federated_bundles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:X509SVIDResponse)
}
X509SVIDResponse::X509SVIDResponse(const X509SVIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      svids_(from.svids_),
      crl_(from.crl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  federated_bundles_.MergeFrom(from.federated_bundles_);
  // @@protoc_insertion_point(copy_constructor:X509SVIDResponse)
}

void X509SVIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_X509SVIDResponse_workload_2eproto.base);
}

X509SVIDResponse::~X509SVIDResponse() {
  // @@protoc_insertion_point(destructor:X509SVIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void X509SVIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void X509SVIDResponse::ArenaDtor(void* object) {
  X509SVIDResponse* _this = reinterpret_cast< X509SVIDResponse* >(object);
  (void)_this;
}
void X509SVIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void X509SVIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const X509SVIDResponse& X509SVIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_X509SVIDResponse_workload_2eproto.base);
  return *internal_default_instance();
}


void X509SVIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:X509SVIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svids_.Clear();
  crl_.Clear();
  federated_bundles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* X509SVIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .X509SVID svids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_svids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes crl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_crl();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, bytes> federated_bundles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&federated_bundles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* X509SVIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:X509SVIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .X509SVID svids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_svids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_svids(i), target, stream);
  }

  // repeated bytes crl = 2;
  for (int i = 0, n = this->_internal_crl_size(); i < n; i++) {
    const auto& s = this->_internal_crl(i);
    target = stream->WriteBytes(2, s, target);
  }

  // map<string, bytes> federated_bundles = 3;
  if (!this->_internal_federated_bundles().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "X509SVIDResponse.FederatedBundlesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_federated_bundles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_federated_bundles().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_federated_bundles().begin();
          it != this->_internal_federated_bundles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = X509SVIDResponse_FederatedBundlesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_federated_bundles().begin();
          it != this->_internal_federated_bundles().end(); ++it) {
        target = X509SVIDResponse_FederatedBundlesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:X509SVIDResponse)
  return target;
}

size_t X509SVIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:X509SVIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .X509SVID svids = 1;
  total_size += 1UL * this->_internal_svids_size();
  for (const auto& msg : this->svids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes crl = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(crl_.size());
  for (int i = 0, n = crl_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      crl_.Get(i));
  }

  // map<string, bytes> federated_bundles = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_federated_bundles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_federated_bundles().begin();
      it != this->_internal_federated_bundles().end(); ++it) {
    total_size += X509SVIDResponse_FederatedBundlesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void X509SVIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:X509SVIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const X509SVIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<X509SVIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:X509SVIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:X509SVIDResponse)
    MergeFrom(*source);
  }
}

void X509SVIDResponse::MergeFrom(const X509SVIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:X509SVIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  svids_.MergeFrom(from.svids_);
  crl_.MergeFrom(from.crl_);
  federated_bundles_.MergeFrom(from.federated_bundles_);
}

void X509SVIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:X509SVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X509SVIDResponse::CopyFrom(const X509SVIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:X509SVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509SVIDResponse::IsInitialized() const {
  return true;
}

void X509SVIDResponse::InternalSwap(X509SVIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  svids_.InternalSwap(&other->svids_);
  crl_.InternalSwap(&other->crl_);
  federated_bundles_.Swap(&other->federated_bundles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata X509SVIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void X509SVID::InitAsDefaultInstance() {
}
class X509SVID::_Internal {
 public:
};

X509SVID::X509SVID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:X509SVID)
}
X509SVID::X509SVID(const X509SVID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spiffe_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spiffe_id().empty()) {
    spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_spiffe_id(),
      GetArena());
  }
  x509_svid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_x509_svid().empty()) {
    x509_svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_x509_svid(),
      GetArena());
  }
  x509_svid_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_x509_svid_key().empty()) {
    x509_svid_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_x509_svid_key(),
      GetArena());
  }
  bundle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bundle().empty()) {
    bundle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bundle(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:X509SVID)
}

void X509SVID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_X509SVID_workload_2eproto.base);
  spiffe_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  x509_svid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  x509_svid_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bundle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

X509SVID::~X509SVID() {
  // @@protoc_insertion_point(destructor:X509SVID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void X509SVID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  spiffe_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  x509_svid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  x509_svid_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bundle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void X509SVID::ArenaDtor(void* object) {
  X509SVID* _this = reinterpret_cast< X509SVID* >(object);
  (void)_this;
}
void X509SVID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void X509SVID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const X509SVID& X509SVID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_X509SVID_workload_2eproto.base);
  return *internal_default_instance();
}


void X509SVID::Clear() {
// @@protoc_insertion_point(message_clear_start:X509SVID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spiffe_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  x509_svid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  x509_svid_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bundle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* X509SVID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string spiffe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spiffe_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "X509SVID.spiffe_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes x509_svid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_x509_svid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes x509_svid_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_x509_svid_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bundle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bundle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* X509SVID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:X509SVID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (this->spiffe_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spiffe_id().data(), static_cast<int>(this->_internal_spiffe_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "X509SVID.spiffe_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spiffe_id(), target);
  }

  // bytes x509_svid = 2;
  if (this->x509_svid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_x509_svid(), target);
  }

  // bytes x509_svid_key = 3;
  if (this->x509_svid_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_x509_svid_key(), target);
  }

  // bytes bundle = 4;
  if (this->bundle().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bundle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:X509SVID)
  return target;
}

size_t X509SVID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:X509SVID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (this->spiffe_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spiffe_id());
  }

  // bytes x509_svid = 2;
  if (this->x509_svid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_x509_svid());
  }

  // bytes x509_svid_key = 3;
  if (this->x509_svid_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_x509_svid_key());
  }

  // bytes bundle = 4;
  if (this->bundle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bundle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void X509SVID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:X509SVID)
  GOOGLE_DCHECK_NE(&from, this);
  const X509SVID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<X509SVID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:X509SVID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:X509SVID)
    MergeFrom(*source);
  }
}

void X509SVID::MergeFrom(const X509SVID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:X509SVID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spiffe_id().size() > 0) {
    _internal_set_spiffe_id(from._internal_spiffe_id());
  }
  if (from.x509_svid().size() > 0) {
    _internal_set_x509_svid(from._internal_x509_svid());
  }
  if (from.x509_svid_key().size() > 0) {
    _internal_set_x509_svid_key(from._internal_x509_svid_key());
  }
  if (from.bundle().size() > 0) {
    _internal_set_bundle(from._internal_bundle());
  }
}

void X509SVID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:X509SVID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X509SVID::CopyFrom(const X509SVID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:X509SVID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509SVID::IsInitialized() const {
  return true;
}

void X509SVID::InternalSwap(X509SVID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spiffe_id_.Swap(&other->spiffe_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  x509_svid_.Swap(&other->x509_svid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  x509_svid_key_.Swap(&other->x509_svid_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bundle_.Swap(&other->bundle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata X509SVID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JWTSVID::InitAsDefaultInstance() {
}
class JWTSVID::_Internal {
 public:
};

JWTSVID::JWTSVID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:JWTSVID)
}
JWTSVID::JWTSVID(const JWTSVID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spiffe_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spiffe_id().empty()) {
    spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_spiffe_id(),
      GetArena());
  }
  svid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_svid().empty()) {
    svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_svid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:JWTSVID)
}

void JWTSVID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JWTSVID_workload_2eproto.base);
  spiffe_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  svid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JWTSVID::~JWTSVID() {
  // @@protoc_insertion_point(destructor:JWTSVID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JWTSVID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  spiffe_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  svid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JWTSVID::ArenaDtor(void* object) {
  JWTSVID* _this = reinterpret_cast< JWTSVID* >(object);
  (void)_this;
}
void JWTSVID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JWTSVID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JWTSVID& JWTSVID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JWTSVID_workload_2eproto.base);
  return *internal_default_instance();
}


void JWTSVID::Clear() {
// @@protoc_insertion_point(message_clear_start:JWTSVID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spiffe_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  svid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JWTSVID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string spiffe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spiffe_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JWTSVID.spiffe_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string svid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_svid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JWTSVID.svid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JWTSVID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JWTSVID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (this->spiffe_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spiffe_id().data(), static_cast<int>(this->_internal_spiffe_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JWTSVID.spiffe_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spiffe_id(), target);
  }

  // string svid = 2;
  if (this->svid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_svid().data(), static_cast<int>(this->_internal_svid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JWTSVID.svid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_svid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JWTSVID)
  return target;
}

size_t JWTSVID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JWTSVID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (this->spiffe_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spiffe_id());
  }

  // string svid = 2;
  if (this->svid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_svid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JWTSVID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JWTSVID)
  GOOGLE_DCHECK_NE(&from, this);
  const JWTSVID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JWTSVID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JWTSVID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JWTSVID)
    MergeFrom(*source);
  }
}

void JWTSVID::MergeFrom(const JWTSVID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JWTSVID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spiffe_id().size() > 0) {
    _internal_set_spiffe_id(from._internal_spiffe_id());
  }
  if (from.svid().size() > 0) {
    _internal_set_svid(from._internal_svid());
  }
}

void JWTSVID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JWTSVID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JWTSVID::CopyFrom(const JWTSVID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JWTSVID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWTSVID::IsInitialized() const {
  return true;
}

void JWTSVID::InternalSwap(JWTSVID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spiffe_id_.Swap(&other->spiffe_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  svid_.Swap(&other->svid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata JWTSVID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JWTSVIDRequest::InitAsDefaultInstance() {
}
class JWTSVIDRequest::_Internal {
 public:
};

JWTSVIDRequest::JWTSVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  audience_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:JWTSVIDRequest)
}
JWTSVIDRequest::JWTSVIDRequest(const JWTSVIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      audience_(from.audience_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spiffe_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spiffe_id().empty()) {
    spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_spiffe_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:JWTSVIDRequest)
}

void JWTSVIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JWTSVIDRequest_workload_2eproto.base);
  spiffe_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JWTSVIDRequest::~JWTSVIDRequest() {
  // @@protoc_insertion_point(destructor:JWTSVIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JWTSVIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  spiffe_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JWTSVIDRequest::ArenaDtor(void* object) {
  JWTSVIDRequest* _this = reinterpret_cast< JWTSVIDRequest* >(object);
  (void)_this;
}
void JWTSVIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JWTSVIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JWTSVIDRequest& JWTSVIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JWTSVIDRequest_workload_2eproto.base);
  return *internal_default_instance();
}


void JWTSVIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:JWTSVIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audience_.Clear();
  spiffe_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JWTSVIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string audience = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_audience();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JWTSVIDRequest.audience"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string spiffe_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_spiffe_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JWTSVIDRequest.spiffe_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JWTSVIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JWTSVIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string audience = 1;
  for (int i = 0, n = this->_internal_audience_size(); i < n; i++) {
    const auto& s = this->_internal_audience(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JWTSVIDRequest.audience");
    target = stream->WriteString(1, s, target);
  }

  // string spiffe_id = 2;
  if (this->spiffe_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spiffe_id().data(), static_cast<int>(this->_internal_spiffe_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JWTSVIDRequest.spiffe_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_spiffe_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JWTSVIDRequest)
  return target;
}

size_t JWTSVIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JWTSVIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string audience = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(audience_.size());
  for (int i = 0, n = audience_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      audience_.Get(i));
  }

  // string spiffe_id = 2;
  if (this->spiffe_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spiffe_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JWTSVIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JWTSVIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JWTSVIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JWTSVIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JWTSVIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JWTSVIDRequest)
    MergeFrom(*source);
  }
}

void JWTSVIDRequest::MergeFrom(const JWTSVIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JWTSVIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  audience_.MergeFrom(from.audience_);
  if (from.spiffe_id().size() > 0) {
    _internal_set_spiffe_id(from._internal_spiffe_id());
  }
}

void JWTSVIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JWTSVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JWTSVIDRequest::CopyFrom(const JWTSVIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JWTSVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWTSVIDRequest::IsInitialized() const {
  return true;
}

void JWTSVIDRequest::InternalSwap(JWTSVIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  audience_.InternalSwap(&other->audience_);
  spiffe_id_.Swap(&other->spiffe_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata JWTSVIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JWTSVIDResponse::InitAsDefaultInstance() {
}
class JWTSVIDResponse::_Internal {
 public:
};

JWTSVIDResponse::JWTSVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  svids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:JWTSVIDResponse)
}
JWTSVIDResponse::JWTSVIDResponse(const JWTSVIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      svids_(from.svids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:JWTSVIDResponse)
}

void JWTSVIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JWTSVIDResponse_workload_2eproto.base);
}

JWTSVIDResponse::~JWTSVIDResponse() {
  // @@protoc_insertion_point(destructor:JWTSVIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JWTSVIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JWTSVIDResponse::ArenaDtor(void* object) {
  JWTSVIDResponse* _this = reinterpret_cast< JWTSVIDResponse* >(object);
  (void)_this;
}
void JWTSVIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JWTSVIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JWTSVIDResponse& JWTSVIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JWTSVIDResponse_workload_2eproto.base);
  return *internal_default_instance();
}


void JWTSVIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:JWTSVIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JWTSVIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .JWTSVID svids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_svids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JWTSVIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JWTSVIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .JWTSVID svids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_svids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_svids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JWTSVIDResponse)
  return target;
}

size_t JWTSVIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JWTSVIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .JWTSVID svids = 1;
  total_size += 1UL * this->_internal_svids_size();
  for (const auto& msg : this->svids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JWTSVIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JWTSVIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JWTSVIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JWTSVIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JWTSVIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JWTSVIDResponse)
    MergeFrom(*source);
  }
}

void JWTSVIDResponse::MergeFrom(const JWTSVIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JWTSVIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  svids_.MergeFrom(from.svids_);
}

void JWTSVIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JWTSVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JWTSVIDResponse::CopyFrom(const JWTSVIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JWTSVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWTSVIDResponse::IsInitialized() const {
  return true;
}

void JWTSVIDResponse::InternalSwap(JWTSVIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  svids_.InternalSwap(&other->svids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JWTSVIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JWTBundlesRequest::InitAsDefaultInstance() {
}
class JWTBundlesRequest::_Internal {
 public:
};

JWTBundlesRequest::JWTBundlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:JWTBundlesRequest)
}
JWTBundlesRequest::JWTBundlesRequest(const JWTBundlesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:JWTBundlesRequest)
}

void JWTBundlesRequest::SharedCtor() {
}

JWTBundlesRequest::~JWTBundlesRequest() {
  // @@protoc_insertion_point(destructor:JWTBundlesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JWTBundlesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JWTBundlesRequest::ArenaDtor(void* object) {
  JWTBundlesRequest* _this = reinterpret_cast< JWTBundlesRequest* >(object);
  (void)_this;
}
void JWTBundlesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JWTBundlesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JWTBundlesRequest& JWTBundlesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JWTBundlesRequest_workload_2eproto.base);
  return *internal_default_instance();
}


void JWTBundlesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:JWTBundlesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JWTBundlesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JWTBundlesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JWTBundlesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JWTBundlesRequest)
  return target;
}

size_t JWTBundlesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JWTBundlesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JWTBundlesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JWTBundlesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JWTBundlesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JWTBundlesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JWTBundlesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JWTBundlesRequest)
    MergeFrom(*source);
  }
}

void JWTBundlesRequest::MergeFrom(const JWTBundlesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JWTBundlesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void JWTBundlesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JWTBundlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JWTBundlesRequest::CopyFrom(const JWTBundlesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JWTBundlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWTBundlesRequest::IsInitialized() const {
  return true;
}

void JWTBundlesRequest::InternalSwap(JWTBundlesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JWTBundlesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

JWTBundlesResponse_BundlesEntry_DoNotUse::JWTBundlesResponse_BundlesEntry_DoNotUse() {}
JWTBundlesResponse_BundlesEntry_DoNotUse::JWTBundlesResponse_BundlesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void JWTBundlesResponse_BundlesEntry_DoNotUse::MergeFrom(const JWTBundlesResponse_BundlesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata JWTBundlesResponse_BundlesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void JWTBundlesResponse_BundlesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void JWTBundlesResponse::InitAsDefaultInstance() {
}
class JWTBundlesResponse::_Internal {
 public:
};

JWTBundlesResponse::JWTBundlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bundles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:JWTBundlesResponse)
}
JWTBundlesResponse::JWTBundlesResponse(const JWTBundlesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bundles_.MergeFrom(from.bundles_);
  // @@protoc_insertion_point(copy_constructor:JWTBundlesResponse)
}

void JWTBundlesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JWTBundlesResponse_workload_2eproto.base);
}

JWTBundlesResponse::~JWTBundlesResponse() {
  // @@protoc_insertion_point(destructor:JWTBundlesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JWTBundlesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JWTBundlesResponse::ArenaDtor(void* object) {
  JWTBundlesResponse* _this = reinterpret_cast< JWTBundlesResponse* >(object);
  (void)_this;
}
void JWTBundlesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JWTBundlesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JWTBundlesResponse& JWTBundlesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JWTBundlesResponse_workload_2eproto.base);
  return *internal_default_instance();
}


void JWTBundlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:JWTBundlesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bundles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JWTBundlesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, bytes> bundles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&bundles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JWTBundlesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JWTBundlesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> bundles = 1;
  if (!this->_internal_bundles().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "JWTBundlesResponse.BundlesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_bundles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_bundles().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_bundles().begin();
          it != this->_internal_bundles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = JWTBundlesResponse_BundlesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_bundles().begin();
          it != this->_internal_bundles().end(); ++it) {
        target = JWTBundlesResponse_BundlesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JWTBundlesResponse)
  return target;
}

size_t JWTBundlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JWTBundlesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> bundles = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bundles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_bundles().begin();
      it != this->_internal_bundles().end(); ++it) {
    total_size += JWTBundlesResponse_BundlesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JWTBundlesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JWTBundlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JWTBundlesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JWTBundlesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JWTBundlesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JWTBundlesResponse)
    MergeFrom(*source);
  }
}

void JWTBundlesResponse::MergeFrom(const JWTBundlesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JWTBundlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bundles_.MergeFrom(from.bundles_);
}

void JWTBundlesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JWTBundlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JWTBundlesResponse::CopyFrom(const JWTBundlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JWTBundlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWTBundlesResponse::IsInitialized() const {
  return true;
}

void JWTBundlesResponse::InternalSwap(JWTBundlesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bundles_.Swap(&other->bundles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JWTBundlesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidateJWTSVIDRequest::InitAsDefaultInstance() {
}
class ValidateJWTSVIDRequest::_Internal {
 public:
};

ValidateJWTSVIDRequest::ValidateJWTSVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ValidateJWTSVIDRequest)
}
ValidateJWTSVIDRequest::ValidateJWTSVIDRequest(const ValidateJWTSVIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audience_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audience().empty()) {
    audience_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_audience(),
      GetArena());
  }
  svid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_svid().empty()) {
    svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_svid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ValidateJWTSVIDRequest)
}

void ValidateJWTSVIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidateJWTSVIDRequest_workload_2eproto.base);
  audience_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  svid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ValidateJWTSVIDRequest::~ValidateJWTSVIDRequest() {
  // @@protoc_insertion_point(destructor:ValidateJWTSVIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateJWTSVIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  audience_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  svid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidateJWTSVIDRequest::ArenaDtor(void* object) {
  ValidateJWTSVIDRequest* _this = reinterpret_cast< ValidateJWTSVIDRequest* >(object);
  (void)_this;
}
void ValidateJWTSVIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateJWTSVIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateJWTSVIDRequest& ValidateJWTSVIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateJWTSVIDRequest_workload_2eproto.base);
  return *internal_default_instance();
}


void ValidateJWTSVIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ValidateJWTSVIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audience_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  svid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateJWTSVIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string audience = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audience();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ValidateJWTSVIDRequest.audience"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string svid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_svid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ValidateJWTSVIDRequest.svid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateJWTSVIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ValidateJWTSVIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string audience = 1;
  if (this->audience().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audience().data(), static_cast<int>(this->_internal_audience().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ValidateJWTSVIDRequest.audience");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audience(), target);
  }

  // string svid = 2;
  if (this->svid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_svid().data(), static_cast<int>(this->_internal_svid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ValidateJWTSVIDRequest.svid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_svid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ValidateJWTSVIDRequest)
  return target;
}

size_t ValidateJWTSVIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ValidateJWTSVIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string audience = 1;
  if (this->audience().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audience());
  }

  // string svid = 2;
  if (this->svid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_svid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateJWTSVIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ValidateJWTSVIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateJWTSVIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateJWTSVIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ValidateJWTSVIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ValidateJWTSVIDRequest)
    MergeFrom(*source);
  }
}

void ValidateJWTSVIDRequest::MergeFrom(const ValidateJWTSVIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ValidateJWTSVIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audience().size() > 0) {
    _internal_set_audience(from._internal_audience());
  }
  if (from.svid().size() > 0) {
    _internal_set_svid(from._internal_svid());
  }
}

void ValidateJWTSVIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ValidateJWTSVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateJWTSVIDRequest::CopyFrom(const ValidateJWTSVIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ValidateJWTSVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateJWTSVIDRequest::IsInitialized() const {
  return true;
}

void ValidateJWTSVIDRequest::InternalSwap(ValidateJWTSVIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  audience_.Swap(&other->audience_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  svid_.Swap(&other->svid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateJWTSVIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidateJWTSVIDResponse::InitAsDefaultInstance() {
  ::_ValidateJWTSVIDResponse_default_instance_._instance.get_mutable()->claims_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class ValidateJWTSVIDResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& claims(const ValidateJWTSVIDResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
ValidateJWTSVIDResponse::_Internal::claims(const ValidateJWTSVIDResponse* msg) {
  return *msg->claims_;
}
void ValidateJWTSVIDResponse::clear_claims() {
  if (GetArena() == nullptr && claims_ != nullptr) {
    delete claims_;
  }
  claims_ = nullptr;
}
ValidateJWTSVIDResponse::ValidateJWTSVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ValidateJWTSVIDResponse)
}
ValidateJWTSVIDResponse::ValidateJWTSVIDResponse(const ValidateJWTSVIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spiffe_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spiffe_id().empty()) {
    spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_spiffe_id(),
      GetArena());
  }
  if (from._internal_has_claims()) {
    claims_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.claims_);
  } else {
    claims_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ValidateJWTSVIDResponse)
}

void ValidateJWTSVIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidateJWTSVIDResponse_workload_2eproto.base);
  spiffe_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  claims_ = nullptr;
}

ValidateJWTSVIDResponse::~ValidateJWTSVIDResponse() {
  // @@protoc_insertion_point(destructor:ValidateJWTSVIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateJWTSVIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  spiffe_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete claims_;
}

void ValidateJWTSVIDResponse::ArenaDtor(void* object) {
  ValidateJWTSVIDResponse* _this = reinterpret_cast< ValidateJWTSVIDResponse* >(object);
  (void)_this;
}
void ValidateJWTSVIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateJWTSVIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateJWTSVIDResponse& ValidateJWTSVIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateJWTSVIDResponse_workload_2eproto.base);
  return *internal_default_instance();
}


void ValidateJWTSVIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ValidateJWTSVIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spiffe_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && claims_ != nullptr) {
    delete claims_;
  }
  claims_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateJWTSVIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string spiffe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spiffe_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ValidateJWTSVIDResponse.spiffe_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct claims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_claims(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateJWTSVIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ValidateJWTSVIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (this->spiffe_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spiffe_id().data(), static_cast<int>(this->_internal_spiffe_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ValidateJWTSVIDResponse.spiffe_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spiffe_id(), target);
  }

  // .google.protobuf.Struct claims = 2;
  if (this->has_claims()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::claims(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ValidateJWTSVIDResponse)
  return target;
}

size_t ValidateJWTSVIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ValidateJWTSVIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (this->spiffe_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spiffe_id());
  }

  // .google.protobuf.Struct claims = 2;
  if (this->has_claims()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *claims_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateJWTSVIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ValidateJWTSVIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateJWTSVIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateJWTSVIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ValidateJWTSVIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ValidateJWTSVIDResponse)
    MergeFrom(*source);
  }
}

void ValidateJWTSVIDResponse::MergeFrom(const ValidateJWTSVIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ValidateJWTSVIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spiffe_id().size() > 0) {
    _internal_set_spiffe_id(from._internal_spiffe_id());
  }
  if (from.has_claims()) {
    _internal_mutable_claims()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_claims());
  }
}

void ValidateJWTSVIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ValidateJWTSVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateJWTSVIDResponse::CopyFrom(const ValidateJWTSVIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ValidateJWTSVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateJWTSVIDResponse::IsInitialized() const {
  return true;
}

void ValidateJWTSVIDResponse::InternalSwap(ValidateJWTSVIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spiffe_id_.Swap(&other->spiffe_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(claims_, other->claims_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateJWTSVIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::X509SVIDRequest* Arena::CreateMaybeMessage< ::X509SVIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509SVIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse* Arena::CreateMaybeMessage< ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::X509SVIDResponse* Arena::CreateMaybeMessage< ::X509SVIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509SVIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::X509SVID* Arena::CreateMaybeMessage< ::X509SVID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509SVID >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTSVID* Arena::CreateMaybeMessage< ::JWTSVID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTSVID >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTSVIDRequest* Arena::CreateMaybeMessage< ::JWTSVIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTSVIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTSVIDResponse* Arena::CreateMaybeMessage< ::JWTSVIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTSVIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTBundlesRequest* Arena::CreateMaybeMessage< ::JWTBundlesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTBundlesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTBundlesResponse_BundlesEntry_DoNotUse* Arena::CreateMaybeMessage< ::JWTBundlesResponse_BundlesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTBundlesResponse_BundlesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTBundlesResponse* Arena::CreateMaybeMessage< ::JWTBundlesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTBundlesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ValidateJWTSVIDRequest* Arena::CreateMaybeMessage< ::ValidateJWTSVIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ValidateJWTSVIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ValidateJWTSVIDResponse* Arena::CreateMaybeMessage< ::ValidateJWTSVIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ValidateJWTSVIDResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
