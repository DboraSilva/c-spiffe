// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_workload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_workload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_workload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_workload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_workload_2eproto;
class JWTBundlesRequest;
class JWTBundlesRequestDefaultTypeInternal;
extern JWTBundlesRequestDefaultTypeInternal _JWTBundlesRequest_default_instance_;
class JWTBundlesResponse;
class JWTBundlesResponseDefaultTypeInternal;
extern JWTBundlesResponseDefaultTypeInternal _JWTBundlesResponse_default_instance_;
class JWTBundlesResponse_BundlesEntry_DoNotUse;
class JWTBundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal;
extern JWTBundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal _JWTBundlesResponse_BundlesEntry_DoNotUse_default_instance_;
class JWTSVID;
class JWTSVIDDefaultTypeInternal;
extern JWTSVIDDefaultTypeInternal _JWTSVID_default_instance_;
class JWTSVIDRequest;
class JWTSVIDRequestDefaultTypeInternal;
extern JWTSVIDRequestDefaultTypeInternal _JWTSVIDRequest_default_instance_;
class JWTSVIDResponse;
class JWTSVIDResponseDefaultTypeInternal;
extern JWTSVIDResponseDefaultTypeInternal _JWTSVIDResponse_default_instance_;
class ValidateJWTSVIDRequest;
class ValidateJWTSVIDRequestDefaultTypeInternal;
extern ValidateJWTSVIDRequestDefaultTypeInternal _ValidateJWTSVIDRequest_default_instance_;
class ValidateJWTSVIDResponse;
class ValidateJWTSVIDResponseDefaultTypeInternal;
extern ValidateJWTSVIDResponseDefaultTypeInternal _ValidateJWTSVIDResponse_default_instance_;
class X509SVID;
class X509SVIDDefaultTypeInternal;
extern X509SVIDDefaultTypeInternal _X509SVID_default_instance_;
class X509SVIDRequest;
class X509SVIDRequestDefaultTypeInternal;
extern X509SVIDRequestDefaultTypeInternal _X509SVIDRequest_default_instance_;
class X509SVIDResponse;
class X509SVIDResponseDefaultTypeInternal;
extern X509SVIDResponseDefaultTypeInternal _X509SVIDResponse_default_instance_;
class X509SVIDResponse_FederatedBundlesEntry_DoNotUse;
class X509SVIDResponse_FederatedBundlesEntry_DoNotUseDefaultTypeInternal;
extern X509SVIDResponse_FederatedBundlesEntry_DoNotUseDefaultTypeInternal _X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::JWTBundlesRequest* Arena::CreateMaybeMessage<::JWTBundlesRequest>(Arena*);
template<> ::JWTBundlesResponse* Arena::CreateMaybeMessage<::JWTBundlesResponse>(Arena*);
template<> ::JWTBundlesResponse_BundlesEntry_DoNotUse* Arena::CreateMaybeMessage<::JWTBundlesResponse_BundlesEntry_DoNotUse>(Arena*);
template<> ::JWTSVID* Arena::CreateMaybeMessage<::JWTSVID>(Arena*);
template<> ::JWTSVIDRequest* Arena::CreateMaybeMessage<::JWTSVIDRequest>(Arena*);
template<> ::JWTSVIDResponse* Arena::CreateMaybeMessage<::JWTSVIDResponse>(Arena*);
template<> ::ValidateJWTSVIDRequest* Arena::CreateMaybeMessage<::ValidateJWTSVIDRequest>(Arena*);
template<> ::ValidateJWTSVIDResponse* Arena::CreateMaybeMessage<::ValidateJWTSVIDResponse>(Arena*);
template<> ::X509SVID* Arena::CreateMaybeMessage<::X509SVID>(Arena*);
template<> ::X509SVIDRequest* Arena::CreateMaybeMessage<::X509SVIDRequest>(Arena*);
template<> ::X509SVIDResponse* Arena::CreateMaybeMessage<::X509SVIDResponse>(Arena*);
template<> ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse* Arena::CreateMaybeMessage<::X509SVIDResponse_FederatedBundlesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class X509SVIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:X509SVIDRequest) */ {
 public:
  inline X509SVIDRequest() : X509SVIDRequest(nullptr) {}
  virtual ~X509SVIDRequest();

  X509SVIDRequest(const X509SVIDRequest& from);
  X509SVIDRequest(X509SVIDRequest&& from) noexcept
    : X509SVIDRequest() {
    *this = ::std::move(from);
  }

  inline X509SVIDRequest& operator=(const X509SVIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline X509SVIDRequest& operator=(X509SVIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const X509SVIDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const X509SVIDRequest* internal_default_instance() {
    return reinterpret_cast<const X509SVIDRequest*>(
               &_X509SVIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(X509SVIDRequest& a, X509SVIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(X509SVIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(X509SVIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline X509SVIDRequest* New() const final {
    return CreateMaybeMessage<X509SVIDRequest>(nullptr);
  }

  X509SVIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<X509SVIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const X509SVIDRequest& from);
  void MergeFrom(const X509SVIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(X509SVIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "X509SVIDRequest";
  }
  protected:
  explicit X509SVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:X509SVIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workload_2eproto;
};
// -------------------------------------------------------------------

class X509SVIDResponse_FederatedBundlesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<X509SVIDResponse_FederatedBundlesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<X509SVIDResponse_FederatedBundlesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  X509SVIDResponse_FederatedBundlesEntry_DoNotUse();
  explicit X509SVIDResponse_FederatedBundlesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const X509SVIDResponse_FederatedBundlesEntry_DoNotUse& other);
  static const X509SVIDResponse_FederatedBundlesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const X509SVIDResponse_FederatedBundlesEntry_DoNotUse*>(&_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "X509SVIDResponse.FederatedBundlesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class X509SVIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:X509SVIDResponse) */ {
 public:
  inline X509SVIDResponse() : X509SVIDResponse(nullptr) {}
  virtual ~X509SVIDResponse();

  X509SVIDResponse(const X509SVIDResponse& from);
  X509SVIDResponse(X509SVIDResponse&& from) noexcept
    : X509SVIDResponse() {
    *this = ::std::move(from);
  }

  inline X509SVIDResponse& operator=(const X509SVIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline X509SVIDResponse& operator=(X509SVIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const X509SVIDResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const X509SVIDResponse* internal_default_instance() {
    return reinterpret_cast<const X509SVIDResponse*>(
               &_X509SVIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(X509SVIDResponse& a, X509SVIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(X509SVIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(X509SVIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline X509SVIDResponse* New() const final {
    return CreateMaybeMessage<X509SVIDResponse>(nullptr);
  }

  X509SVIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<X509SVIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const X509SVIDResponse& from);
  void MergeFrom(const X509SVIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(X509SVIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "X509SVIDResponse";
  }
  protected:
  explicit X509SVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSvidsFieldNumber = 1,
    kCrlFieldNumber = 2,
    kFederatedBundlesFieldNumber = 3,
  };
  // repeated .X509SVID svids = 1;
  int svids_size() const;
  private:
  int _internal_svids_size() const;
  public:
  void clear_svids();
  ::X509SVID* mutable_svids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::X509SVID >*
      mutable_svids();
  private:
  const ::X509SVID& _internal_svids(int index) const;
  ::X509SVID* _internal_add_svids();
  public:
  const ::X509SVID& svids(int index) const;
  ::X509SVID* add_svids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::X509SVID >&
      svids() const;

  // repeated bytes crl = 2;
  int crl_size() const;
  private:
  int _internal_crl_size() const;
  public:
  void clear_crl();
  const std::string& crl(int index) const;
  std::string* mutable_crl(int index);
  void set_crl(int index, const std::string& value);
  void set_crl(int index, std::string&& value);
  void set_crl(int index, const char* value);
  void set_crl(int index, const void* value, size_t size);
  std::string* add_crl();
  void add_crl(const std::string& value);
  void add_crl(std::string&& value);
  void add_crl(const char* value);
  void add_crl(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& crl() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_crl();
  private:
  const std::string& _internal_crl(int index) const;
  std::string* _internal_add_crl();
  public:

  // map<string, bytes> federated_bundles = 3;
  int federated_bundles_size() const;
  private:
  int _internal_federated_bundles_size() const;
  public:
  void clear_federated_bundles();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_federated_bundles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_federated_bundles();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      federated_bundles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_federated_bundles();

  // @@protoc_insertion_point(class_scope:X509SVIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::X509SVID > svids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> crl_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      X509SVIDResponse_FederatedBundlesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > federated_bundles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workload_2eproto;
};
// -------------------------------------------------------------------

class X509SVID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:X509SVID) */ {
 public:
  inline X509SVID() : X509SVID(nullptr) {}
  virtual ~X509SVID();

  X509SVID(const X509SVID& from);
  X509SVID(X509SVID&& from) noexcept
    : X509SVID() {
    *this = ::std::move(from);
  }

  inline X509SVID& operator=(const X509SVID& from) {
    CopyFrom(from);
    return *this;
  }
  inline X509SVID& operator=(X509SVID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const X509SVID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const X509SVID* internal_default_instance() {
    return reinterpret_cast<const X509SVID*>(
               &_X509SVID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(X509SVID& a, X509SVID& b) {
    a.Swap(&b);
  }
  inline void Swap(X509SVID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(X509SVID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline X509SVID* New() const final {
    return CreateMaybeMessage<X509SVID>(nullptr);
  }

  X509SVID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<X509SVID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const X509SVID& from);
  void MergeFrom(const X509SVID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(X509SVID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "X509SVID";
  }
  protected:
  explicit X509SVID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpiffeIdFieldNumber = 1,
    kX509SvidFieldNumber = 2,
    kX509SvidKeyFieldNumber = 3,
    kBundleFieldNumber = 4,
  };
  // string spiffe_id = 1;
  void clear_spiffe_id();
  const std::string& spiffe_id() const;
  void set_spiffe_id(const std::string& value);
  void set_spiffe_id(std::string&& value);
  void set_spiffe_id(const char* value);
  void set_spiffe_id(const char* value, size_t size);
  std::string* mutable_spiffe_id();
  std::string* release_spiffe_id();
  void set_allocated_spiffe_id(std::string* spiffe_id);
  private:
  const std::string& _internal_spiffe_id() const;
  void _internal_set_spiffe_id(const std::string& value);
  std::string* _internal_mutable_spiffe_id();
  public:

  // bytes x509_svid = 2;
  void clear_x509_svid();
  const std::string& x509_svid() const;
  void set_x509_svid(const std::string& value);
  void set_x509_svid(std::string&& value);
  void set_x509_svid(const char* value);
  void set_x509_svid(const void* value, size_t size);
  std::string* mutable_x509_svid();
  std::string* release_x509_svid();
  void set_allocated_x509_svid(std::string* x509_svid);
  private:
  const std::string& _internal_x509_svid() const;
  void _internal_set_x509_svid(const std::string& value);
  std::string* _internal_mutable_x509_svid();
  public:

  // bytes x509_svid_key = 3;
  void clear_x509_svid_key();
  const std::string& x509_svid_key() const;
  void set_x509_svid_key(const std::string& value);
  void set_x509_svid_key(std::string&& value);
  void set_x509_svid_key(const char* value);
  void set_x509_svid_key(const void* value, size_t size);
  std::string* mutable_x509_svid_key();
  std::string* release_x509_svid_key();
  void set_allocated_x509_svid_key(std::string* x509_svid_key);
  private:
  const std::string& _internal_x509_svid_key() const;
  void _internal_set_x509_svid_key(const std::string& value);
  std::string* _internal_mutable_x509_svid_key();
  public:

  // bytes bundle = 4;
  void clear_bundle();
  const std::string& bundle() const;
  void set_bundle(const std::string& value);
  void set_bundle(std::string&& value);
  void set_bundle(const char* value);
  void set_bundle(const void* value, size_t size);
  std::string* mutable_bundle();
  std::string* release_bundle();
  void set_allocated_bundle(std::string* bundle);
  private:
  const std::string& _internal_bundle() const;
  void _internal_set_bundle(const std::string& value);
  std::string* _internal_mutable_bundle();
  public:

  // @@protoc_insertion_point(class_scope:X509SVID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spiffe_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x509_svid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x509_svid_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bundle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workload_2eproto;
};
// -------------------------------------------------------------------

class JWTSVID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JWTSVID) */ {
 public:
  inline JWTSVID() : JWTSVID(nullptr) {}
  virtual ~JWTSVID();

  JWTSVID(const JWTSVID& from);
  JWTSVID(JWTSVID&& from) noexcept
    : JWTSVID() {
    *this = ::std::move(from);
  }

  inline JWTSVID& operator=(const JWTSVID& from) {
    CopyFrom(from);
    return *this;
  }
  inline JWTSVID& operator=(JWTSVID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JWTSVID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JWTSVID* internal_default_instance() {
    return reinterpret_cast<const JWTSVID*>(
               &_JWTSVID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JWTSVID& a, JWTSVID& b) {
    a.Swap(&b);
  }
  inline void Swap(JWTSVID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JWTSVID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JWTSVID* New() const final {
    return CreateMaybeMessage<JWTSVID>(nullptr);
  }

  JWTSVID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JWTSVID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JWTSVID& from);
  void MergeFrom(const JWTSVID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JWTSVID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JWTSVID";
  }
  protected:
  explicit JWTSVID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpiffeIdFieldNumber = 1,
    kSvidFieldNumber = 2,
  };
  // string spiffe_id = 1;
  void clear_spiffe_id();
  const std::string& spiffe_id() const;
  void set_spiffe_id(const std::string& value);
  void set_spiffe_id(std::string&& value);
  void set_spiffe_id(const char* value);
  void set_spiffe_id(const char* value, size_t size);
  std::string* mutable_spiffe_id();
  std::string* release_spiffe_id();
  void set_allocated_spiffe_id(std::string* spiffe_id);
  private:
  const std::string& _internal_spiffe_id() const;
  void _internal_set_spiffe_id(const std::string& value);
  std::string* _internal_mutable_spiffe_id();
  public:

  // string svid = 2;
  void clear_svid();
  const std::string& svid() const;
  void set_svid(const std::string& value);
  void set_svid(std::string&& value);
  void set_svid(const char* value);
  void set_svid(const char* value, size_t size);
  std::string* mutable_svid();
  std::string* release_svid();
  void set_allocated_svid(std::string* svid);
  private:
  const std::string& _internal_svid() const;
  void _internal_set_svid(const std::string& value);
  std::string* _internal_mutable_svid();
  public:

  // @@protoc_insertion_point(class_scope:JWTSVID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spiffe_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr svid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workload_2eproto;
};
// -------------------------------------------------------------------

class JWTSVIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JWTSVIDRequest) */ {
 public:
  inline JWTSVIDRequest() : JWTSVIDRequest(nullptr) {}
  virtual ~JWTSVIDRequest();

  JWTSVIDRequest(const JWTSVIDRequest& from);
  JWTSVIDRequest(JWTSVIDRequest&& from) noexcept
    : JWTSVIDRequest() {
    *this = ::std::move(from);
  }

  inline JWTSVIDRequest& operator=(const JWTSVIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JWTSVIDRequest& operator=(JWTSVIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JWTSVIDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JWTSVIDRequest* internal_default_instance() {
    return reinterpret_cast<const JWTSVIDRequest*>(
               &_JWTSVIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JWTSVIDRequest& a, JWTSVIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JWTSVIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JWTSVIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JWTSVIDRequest* New() const final {
    return CreateMaybeMessage<JWTSVIDRequest>(nullptr);
  }

  JWTSVIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JWTSVIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JWTSVIDRequest& from);
  void MergeFrom(const JWTSVIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JWTSVIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JWTSVIDRequest";
  }
  protected:
  explicit JWTSVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudienceFieldNumber = 1,
    kSpiffeIdFieldNumber = 2,
  };
  // repeated string audience = 1;
  int audience_size() const;
  private:
  int _internal_audience_size() const;
  public:
  void clear_audience();
  const std::string& audience(int index) const;
  std::string* mutable_audience(int index);
  void set_audience(int index, const std::string& value);
  void set_audience(int index, std::string&& value);
  void set_audience(int index, const char* value);
  void set_audience(int index, const char* value, size_t size);
  std::string* add_audience();
  void add_audience(const std::string& value);
  void add_audience(std::string&& value);
  void add_audience(const char* value);
  void add_audience(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& audience() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_audience();
  private:
  const std::string& _internal_audience(int index) const;
  std::string* _internal_add_audience();
  public:

  // string spiffe_id = 2;
  void clear_spiffe_id();
  const std::string& spiffe_id() const;
  void set_spiffe_id(const std::string& value);
  void set_spiffe_id(std::string&& value);
  void set_spiffe_id(const char* value);
  void set_spiffe_id(const char* value, size_t size);
  std::string* mutable_spiffe_id();
  std::string* release_spiffe_id();
  void set_allocated_spiffe_id(std::string* spiffe_id);
  private:
  const std::string& _internal_spiffe_id() const;
  void _internal_set_spiffe_id(const std::string& value);
  std::string* _internal_mutable_spiffe_id();
  public:

  // @@protoc_insertion_point(class_scope:JWTSVIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> audience_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spiffe_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workload_2eproto;
};
// -------------------------------------------------------------------

class JWTSVIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JWTSVIDResponse) */ {
 public:
  inline JWTSVIDResponse() : JWTSVIDResponse(nullptr) {}
  virtual ~JWTSVIDResponse();

  JWTSVIDResponse(const JWTSVIDResponse& from);
  JWTSVIDResponse(JWTSVIDResponse&& from) noexcept
    : JWTSVIDResponse() {
    *this = ::std::move(from);
  }

  inline JWTSVIDResponse& operator=(const JWTSVIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JWTSVIDResponse& operator=(JWTSVIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JWTSVIDResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JWTSVIDResponse* internal_default_instance() {
    return reinterpret_cast<const JWTSVIDResponse*>(
               &_JWTSVIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JWTSVIDResponse& a, JWTSVIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JWTSVIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JWTSVIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JWTSVIDResponse* New() const final {
    return CreateMaybeMessage<JWTSVIDResponse>(nullptr);
  }

  JWTSVIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JWTSVIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JWTSVIDResponse& from);
  void MergeFrom(const JWTSVIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JWTSVIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JWTSVIDResponse";
  }
  protected:
  explicit JWTSVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvidsFieldNumber = 1,
  };
  // repeated .JWTSVID svids = 1;
  int svids_size() const;
  private:
  int _internal_svids_size() const;
  public:
  void clear_svids();
  ::JWTSVID* mutable_svids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JWTSVID >*
      mutable_svids();
  private:
  const ::JWTSVID& _internal_svids(int index) const;
  ::JWTSVID* _internal_add_svids();
  public:
  const ::JWTSVID& svids(int index) const;
  ::JWTSVID* add_svids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JWTSVID >&
      svids() const;

  // @@protoc_insertion_point(class_scope:JWTSVIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JWTSVID > svids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workload_2eproto;
};
// -------------------------------------------------------------------

class JWTBundlesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JWTBundlesRequest) */ {
 public:
  inline JWTBundlesRequest() : JWTBundlesRequest(nullptr) {}
  virtual ~JWTBundlesRequest();

  JWTBundlesRequest(const JWTBundlesRequest& from);
  JWTBundlesRequest(JWTBundlesRequest&& from) noexcept
    : JWTBundlesRequest() {
    *this = ::std::move(from);
  }

  inline JWTBundlesRequest& operator=(const JWTBundlesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JWTBundlesRequest& operator=(JWTBundlesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JWTBundlesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JWTBundlesRequest* internal_default_instance() {
    return reinterpret_cast<const JWTBundlesRequest*>(
               &_JWTBundlesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(JWTBundlesRequest& a, JWTBundlesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JWTBundlesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JWTBundlesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JWTBundlesRequest* New() const final {
    return CreateMaybeMessage<JWTBundlesRequest>(nullptr);
  }

  JWTBundlesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JWTBundlesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JWTBundlesRequest& from);
  void MergeFrom(const JWTBundlesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JWTBundlesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JWTBundlesRequest";
  }
  protected:
  explicit JWTBundlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JWTBundlesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workload_2eproto;
};
// -------------------------------------------------------------------

class JWTBundlesResponse_BundlesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JWTBundlesResponse_BundlesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JWTBundlesResponse_BundlesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  JWTBundlesResponse_BundlesEntry_DoNotUse();
  explicit JWTBundlesResponse_BundlesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const JWTBundlesResponse_BundlesEntry_DoNotUse& other);
  static const JWTBundlesResponse_BundlesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const JWTBundlesResponse_BundlesEntry_DoNotUse*>(&_JWTBundlesResponse_BundlesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "JWTBundlesResponse.BundlesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class JWTBundlesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JWTBundlesResponse) */ {
 public:
  inline JWTBundlesResponse() : JWTBundlesResponse(nullptr) {}
  virtual ~JWTBundlesResponse();

  JWTBundlesResponse(const JWTBundlesResponse& from);
  JWTBundlesResponse(JWTBundlesResponse&& from) noexcept
    : JWTBundlesResponse() {
    *this = ::std::move(from);
  }

  inline JWTBundlesResponse& operator=(const JWTBundlesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JWTBundlesResponse& operator=(JWTBundlesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JWTBundlesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JWTBundlesResponse* internal_default_instance() {
    return reinterpret_cast<const JWTBundlesResponse*>(
               &_JWTBundlesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(JWTBundlesResponse& a, JWTBundlesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JWTBundlesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JWTBundlesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JWTBundlesResponse* New() const final {
    return CreateMaybeMessage<JWTBundlesResponse>(nullptr);
  }

  JWTBundlesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JWTBundlesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JWTBundlesResponse& from);
  void MergeFrom(const JWTBundlesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JWTBundlesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JWTBundlesResponse";
  }
  protected:
  explicit JWTBundlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBundlesFieldNumber = 1,
  };
  // map<string, bytes> bundles = 1;
  int bundles_size() const;
  private:
  int _internal_bundles_size() const;
  public:
  void clear_bundles();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_bundles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_bundles();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      bundles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_bundles();

  // @@protoc_insertion_point(class_scope:JWTBundlesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      JWTBundlesResponse_BundlesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > bundles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workload_2eproto;
};
// -------------------------------------------------------------------

class ValidateJWTSVIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ValidateJWTSVIDRequest) */ {
 public:
  inline ValidateJWTSVIDRequest() : ValidateJWTSVIDRequest(nullptr) {}
  virtual ~ValidateJWTSVIDRequest();

  ValidateJWTSVIDRequest(const ValidateJWTSVIDRequest& from);
  ValidateJWTSVIDRequest(ValidateJWTSVIDRequest&& from) noexcept
    : ValidateJWTSVIDRequest() {
    *this = ::std::move(from);
  }

  inline ValidateJWTSVIDRequest& operator=(const ValidateJWTSVIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateJWTSVIDRequest& operator=(ValidateJWTSVIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateJWTSVIDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateJWTSVIDRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateJWTSVIDRequest*>(
               &_ValidateJWTSVIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ValidateJWTSVIDRequest& a, ValidateJWTSVIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateJWTSVIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateJWTSVIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateJWTSVIDRequest* New() const final {
    return CreateMaybeMessage<ValidateJWTSVIDRequest>(nullptr);
  }

  ValidateJWTSVIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateJWTSVIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateJWTSVIDRequest& from);
  void MergeFrom(const ValidateJWTSVIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateJWTSVIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ValidateJWTSVIDRequest";
  }
  protected:
  explicit ValidateJWTSVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudienceFieldNumber = 1,
    kSvidFieldNumber = 2,
  };
  // string audience = 1;
  void clear_audience();
  const std::string& audience() const;
  void set_audience(const std::string& value);
  void set_audience(std::string&& value);
  void set_audience(const char* value);
  void set_audience(const char* value, size_t size);
  std::string* mutable_audience();
  std::string* release_audience();
  void set_allocated_audience(std::string* audience);
  private:
  const std::string& _internal_audience() const;
  void _internal_set_audience(const std::string& value);
  std::string* _internal_mutable_audience();
  public:

  // string svid = 2;
  void clear_svid();
  const std::string& svid() const;
  void set_svid(const std::string& value);
  void set_svid(std::string&& value);
  void set_svid(const char* value);
  void set_svid(const char* value, size_t size);
  std::string* mutable_svid();
  std::string* release_svid();
  void set_allocated_svid(std::string* svid);
  private:
  const std::string& _internal_svid() const;
  void _internal_set_svid(const std::string& value);
  std::string* _internal_mutable_svid();
  public:

  // @@protoc_insertion_point(class_scope:ValidateJWTSVIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audience_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr svid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workload_2eproto;
};
// -------------------------------------------------------------------

class ValidateJWTSVIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ValidateJWTSVIDResponse) */ {
 public:
  inline ValidateJWTSVIDResponse() : ValidateJWTSVIDResponse(nullptr) {}
  virtual ~ValidateJWTSVIDResponse();

  ValidateJWTSVIDResponse(const ValidateJWTSVIDResponse& from);
  ValidateJWTSVIDResponse(ValidateJWTSVIDResponse&& from) noexcept
    : ValidateJWTSVIDResponse() {
    *this = ::std::move(from);
  }

  inline ValidateJWTSVIDResponse& operator=(const ValidateJWTSVIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateJWTSVIDResponse& operator=(ValidateJWTSVIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateJWTSVIDResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateJWTSVIDResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateJWTSVIDResponse*>(
               &_ValidateJWTSVIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ValidateJWTSVIDResponse& a, ValidateJWTSVIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateJWTSVIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateJWTSVIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateJWTSVIDResponse* New() const final {
    return CreateMaybeMessage<ValidateJWTSVIDResponse>(nullptr);
  }

  ValidateJWTSVIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateJWTSVIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateJWTSVIDResponse& from);
  void MergeFrom(const ValidateJWTSVIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateJWTSVIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ValidateJWTSVIDResponse";
  }
  protected:
  explicit ValidateJWTSVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_workload_2eproto);
    return ::descriptor_table_workload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpiffeIdFieldNumber = 1,
    kClaimsFieldNumber = 2,
  };
  // string spiffe_id = 1;
  void clear_spiffe_id();
  const std::string& spiffe_id() const;
  void set_spiffe_id(const std::string& value);
  void set_spiffe_id(std::string&& value);
  void set_spiffe_id(const char* value);
  void set_spiffe_id(const char* value, size_t size);
  std::string* mutable_spiffe_id();
  std::string* release_spiffe_id();
  void set_allocated_spiffe_id(std::string* spiffe_id);
  private:
  const std::string& _internal_spiffe_id() const;
  void _internal_set_spiffe_id(const std::string& value);
  std::string* _internal_mutable_spiffe_id();
  public:

  // .google.protobuf.Struct claims = 2;
  bool has_claims() const;
  private:
  bool _internal_has_claims() const;
  public:
  void clear_claims();
  const PROTOBUF_NAMESPACE_ID::Struct& claims() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_claims();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_claims();
  void set_allocated_claims(PROTOBUF_NAMESPACE_ID::Struct* claims);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_claims() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_claims();
  public:
  void unsafe_arena_set_allocated_claims(
      PROTOBUF_NAMESPACE_ID::Struct* claims);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_claims();

  // @@protoc_insertion_point(class_scope:ValidateJWTSVIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spiffe_id_;
  PROTOBUF_NAMESPACE_ID::Struct* claims_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// X509SVIDRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// X509SVIDResponse

// repeated .X509SVID svids = 1;
inline int X509SVIDResponse::_internal_svids_size() const {
  return svids_.size();
}
inline int X509SVIDResponse::svids_size() const {
  return _internal_svids_size();
}
inline void X509SVIDResponse::clear_svids() {
  svids_.Clear();
}
inline ::X509SVID* X509SVIDResponse::mutable_svids(int index) {
  // @@protoc_insertion_point(field_mutable:X509SVIDResponse.svids)
  return svids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::X509SVID >*
X509SVIDResponse::mutable_svids() {
  // @@protoc_insertion_point(field_mutable_list:X509SVIDResponse.svids)
  return &svids_;
}
inline const ::X509SVID& X509SVIDResponse::_internal_svids(int index) const {
  return svids_.Get(index);
}
inline const ::X509SVID& X509SVIDResponse::svids(int index) const {
  // @@protoc_insertion_point(field_get:X509SVIDResponse.svids)
  return _internal_svids(index);
}
inline ::X509SVID* X509SVIDResponse::_internal_add_svids() {
  return svids_.Add();
}
inline ::X509SVID* X509SVIDResponse::add_svids() {
  // @@protoc_insertion_point(field_add:X509SVIDResponse.svids)
  return _internal_add_svids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::X509SVID >&
X509SVIDResponse::svids() const {
  // @@protoc_insertion_point(field_list:X509SVIDResponse.svids)
  return svids_;
}

// repeated bytes crl = 2;
inline int X509SVIDResponse::_internal_crl_size() const {
  return crl_.size();
}
inline int X509SVIDResponse::crl_size() const {
  return _internal_crl_size();
}
inline void X509SVIDResponse::clear_crl() {
  crl_.Clear();
}
inline std::string* X509SVIDResponse::add_crl() {
  // @@protoc_insertion_point(field_add_mutable:X509SVIDResponse.crl)
  return _internal_add_crl();
}
inline const std::string& X509SVIDResponse::_internal_crl(int index) const {
  return crl_.Get(index);
}
inline const std::string& X509SVIDResponse::crl(int index) const {
  // @@protoc_insertion_point(field_get:X509SVIDResponse.crl)
  return _internal_crl(index);
}
inline std::string* X509SVIDResponse::mutable_crl(int index) {
  // @@protoc_insertion_point(field_mutable:X509SVIDResponse.crl)
  return crl_.Mutable(index);
}
inline void X509SVIDResponse::set_crl(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:X509SVIDResponse.crl)
  crl_.Mutable(index)->assign(value);
}
inline void X509SVIDResponse::set_crl(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:X509SVIDResponse.crl)
  crl_.Mutable(index)->assign(std::move(value));
}
inline void X509SVIDResponse::set_crl(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  crl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:X509SVIDResponse.crl)
}
inline void X509SVIDResponse::set_crl(int index, const void* value, size_t size) {
  crl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:X509SVIDResponse.crl)
}
inline std::string* X509SVIDResponse::_internal_add_crl() {
  return crl_.Add();
}
inline void X509SVIDResponse::add_crl(const std::string& value) {
  crl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:X509SVIDResponse.crl)
}
inline void X509SVIDResponse::add_crl(std::string&& value) {
  crl_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:X509SVIDResponse.crl)
}
inline void X509SVIDResponse::add_crl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  crl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:X509SVIDResponse.crl)
}
inline void X509SVIDResponse::add_crl(const void* value, size_t size) {
  crl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:X509SVIDResponse.crl)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
X509SVIDResponse::crl() const {
  // @@protoc_insertion_point(field_list:X509SVIDResponse.crl)
  return crl_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
X509SVIDResponse::mutable_crl() {
  // @@protoc_insertion_point(field_mutable_list:X509SVIDResponse.crl)
  return &crl_;
}

// map<string, bytes> federated_bundles = 3;
inline int X509SVIDResponse::_internal_federated_bundles_size() const {
  return federated_bundles_.size();
}
inline int X509SVIDResponse::federated_bundles_size() const {
  return _internal_federated_bundles_size();
}
inline void X509SVIDResponse::clear_federated_bundles() {
  federated_bundles_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
X509SVIDResponse::_internal_federated_bundles() const {
  return federated_bundles_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
X509SVIDResponse::federated_bundles() const {
  // @@protoc_insertion_point(field_map:X509SVIDResponse.federated_bundles)
  return _internal_federated_bundles();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
X509SVIDResponse::_internal_mutable_federated_bundles() {
  return federated_bundles_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
X509SVIDResponse::mutable_federated_bundles() {
  // @@protoc_insertion_point(field_mutable_map:X509SVIDResponse.federated_bundles)
  return _internal_mutable_federated_bundles();
}

// -------------------------------------------------------------------

// X509SVID

// string spiffe_id = 1;
inline void X509SVID::clear_spiffe_id() {
  spiffe_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& X509SVID::spiffe_id() const {
  // @@protoc_insertion_point(field_get:X509SVID.spiffe_id)
  return _internal_spiffe_id();
}
inline void X509SVID::set_spiffe_id(const std::string& value) {
  _internal_set_spiffe_id(value);
  // @@protoc_insertion_point(field_set:X509SVID.spiffe_id)
}
inline std::string* X509SVID::mutable_spiffe_id() {
  // @@protoc_insertion_point(field_mutable:X509SVID.spiffe_id)
  return _internal_mutable_spiffe_id();
}
inline const std::string& X509SVID::_internal_spiffe_id() const {
  return spiffe_id_.Get();
}
inline void X509SVID::_internal_set_spiffe_id(const std::string& value) {
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void X509SVID::set_spiffe_id(std::string&& value) {
  
  spiffe_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:X509SVID.spiffe_id)
}
inline void X509SVID::set_spiffe_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:X509SVID.spiffe_id)
}
inline void X509SVID::set_spiffe_id(const char* value,
    size_t size) {
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:X509SVID.spiffe_id)
}
inline std::string* X509SVID::_internal_mutable_spiffe_id() {
  
  return spiffe_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* X509SVID::release_spiffe_id() {
  // @@protoc_insertion_point(field_release:X509SVID.spiffe_id)
  return spiffe_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void X509SVID::set_allocated_spiffe_id(std::string* spiffe_id) {
  if (spiffe_id != nullptr) {
    
  } else {
    
  }
  spiffe_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spiffe_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:X509SVID.spiffe_id)
}

// bytes x509_svid = 2;
inline void X509SVID::clear_x509_svid() {
  x509_svid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& X509SVID::x509_svid() const {
  // @@protoc_insertion_point(field_get:X509SVID.x509_svid)
  return _internal_x509_svid();
}
inline void X509SVID::set_x509_svid(const std::string& value) {
  _internal_set_x509_svid(value);
  // @@protoc_insertion_point(field_set:X509SVID.x509_svid)
}
inline std::string* X509SVID::mutable_x509_svid() {
  // @@protoc_insertion_point(field_mutable:X509SVID.x509_svid)
  return _internal_mutable_x509_svid();
}
inline const std::string& X509SVID::_internal_x509_svid() const {
  return x509_svid_.Get();
}
inline void X509SVID::_internal_set_x509_svid(const std::string& value) {
  
  x509_svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void X509SVID::set_x509_svid(std::string&& value) {
  
  x509_svid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:X509SVID.x509_svid)
}
inline void X509SVID::set_x509_svid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x509_svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:X509SVID.x509_svid)
}
inline void X509SVID::set_x509_svid(const void* value,
    size_t size) {
  
  x509_svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:X509SVID.x509_svid)
}
inline std::string* X509SVID::_internal_mutable_x509_svid() {
  
  return x509_svid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* X509SVID::release_x509_svid() {
  // @@protoc_insertion_point(field_release:X509SVID.x509_svid)
  return x509_svid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void X509SVID::set_allocated_x509_svid(std::string* x509_svid) {
  if (x509_svid != nullptr) {
    
  } else {
    
  }
  x509_svid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x509_svid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:X509SVID.x509_svid)
}

// bytes x509_svid_key = 3;
inline void X509SVID::clear_x509_svid_key() {
  x509_svid_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& X509SVID::x509_svid_key() const {
  // @@protoc_insertion_point(field_get:X509SVID.x509_svid_key)
  return _internal_x509_svid_key();
}
inline void X509SVID::set_x509_svid_key(const std::string& value) {
  _internal_set_x509_svid_key(value);
  // @@protoc_insertion_point(field_set:X509SVID.x509_svid_key)
}
inline std::string* X509SVID::mutable_x509_svid_key() {
  // @@protoc_insertion_point(field_mutable:X509SVID.x509_svid_key)
  return _internal_mutable_x509_svid_key();
}
inline const std::string& X509SVID::_internal_x509_svid_key() const {
  return x509_svid_key_.Get();
}
inline void X509SVID::_internal_set_x509_svid_key(const std::string& value) {
  
  x509_svid_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void X509SVID::set_x509_svid_key(std::string&& value) {
  
  x509_svid_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:X509SVID.x509_svid_key)
}
inline void X509SVID::set_x509_svid_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x509_svid_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:X509SVID.x509_svid_key)
}
inline void X509SVID::set_x509_svid_key(const void* value,
    size_t size) {
  
  x509_svid_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:X509SVID.x509_svid_key)
}
inline std::string* X509SVID::_internal_mutable_x509_svid_key() {
  
  return x509_svid_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* X509SVID::release_x509_svid_key() {
  // @@protoc_insertion_point(field_release:X509SVID.x509_svid_key)
  return x509_svid_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void X509SVID::set_allocated_x509_svid_key(std::string* x509_svid_key) {
  if (x509_svid_key != nullptr) {
    
  } else {
    
  }
  x509_svid_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x509_svid_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:X509SVID.x509_svid_key)
}

// bytes bundle = 4;
inline void X509SVID::clear_bundle() {
  bundle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& X509SVID::bundle() const {
  // @@protoc_insertion_point(field_get:X509SVID.bundle)
  return _internal_bundle();
}
inline void X509SVID::set_bundle(const std::string& value) {
  _internal_set_bundle(value);
  // @@protoc_insertion_point(field_set:X509SVID.bundle)
}
inline std::string* X509SVID::mutable_bundle() {
  // @@protoc_insertion_point(field_mutable:X509SVID.bundle)
  return _internal_mutable_bundle();
}
inline const std::string& X509SVID::_internal_bundle() const {
  return bundle_.Get();
}
inline void X509SVID::_internal_set_bundle(const std::string& value) {
  
  bundle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void X509SVID::set_bundle(std::string&& value) {
  
  bundle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:X509SVID.bundle)
}
inline void X509SVID::set_bundle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bundle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:X509SVID.bundle)
}
inline void X509SVID::set_bundle(const void* value,
    size_t size) {
  
  bundle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:X509SVID.bundle)
}
inline std::string* X509SVID::_internal_mutable_bundle() {
  
  return bundle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* X509SVID::release_bundle() {
  // @@protoc_insertion_point(field_release:X509SVID.bundle)
  return bundle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void X509SVID::set_allocated_bundle(std::string* bundle) {
  if (bundle != nullptr) {
    
  } else {
    
  }
  bundle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bundle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:X509SVID.bundle)
}

// -------------------------------------------------------------------

// JWTSVID

// string spiffe_id = 1;
inline void JWTSVID::clear_spiffe_id() {
  spiffe_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JWTSVID::spiffe_id() const {
  // @@protoc_insertion_point(field_get:JWTSVID.spiffe_id)
  return _internal_spiffe_id();
}
inline void JWTSVID::set_spiffe_id(const std::string& value) {
  _internal_set_spiffe_id(value);
  // @@protoc_insertion_point(field_set:JWTSVID.spiffe_id)
}
inline std::string* JWTSVID::mutable_spiffe_id() {
  // @@protoc_insertion_point(field_mutable:JWTSVID.spiffe_id)
  return _internal_mutable_spiffe_id();
}
inline const std::string& JWTSVID::_internal_spiffe_id() const {
  return spiffe_id_.Get();
}
inline void JWTSVID::_internal_set_spiffe_id(const std::string& value) {
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JWTSVID::set_spiffe_id(std::string&& value) {
  
  spiffe_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JWTSVID.spiffe_id)
}
inline void JWTSVID::set_spiffe_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:JWTSVID.spiffe_id)
}
inline void JWTSVID::set_spiffe_id(const char* value,
    size_t size) {
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JWTSVID.spiffe_id)
}
inline std::string* JWTSVID::_internal_mutable_spiffe_id() {
  
  return spiffe_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JWTSVID::release_spiffe_id() {
  // @@protoc_insertion_point(field_release:JWTSVID.spiffe_id)
  return spiffe_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JWTSVID::set_allocated_spiffe_id(std::string* spiffe_id) {
  if (spiffe_id != nullptr) {
    
  } else {
    
  }
  spiffe_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spiffe_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JWTSVID.spiffe_id)
}

// string svid = 2;
inline void JWTSVID::clear_svid() {
  svid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JWTSVID::svid() const {
  // @@protoc_insertion_point(field_get:JWTSVID.svid)
  return _internal_svid();
}
inline void JWTSVID::set_svid(const std::string& value) {
  _internal_set_svid(value);
  // @@protoc_insertion_point(field_set:JWTSVID.svid)
}
inline std::string* JWTSVID::mutable_svid() {
  // @@protoc_insertion_point(field_mutable:JWTSVID.svid)
  return _internal_mutable_svid();
}
inline const std::string& JWTSVID::_internal_svid() const {
  return svid_.Get();
}
inline void JWTSVID::_internal_set_svid(const std::string& value) {
  
  svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JWTSVID::set_svid(std::string&& value) {
  
  svid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JWTSVID.svid)
}
inline void JWTSVID::set_svid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:JWTSVID.svid)
}
inline void JWTSVID::set_svid(const char* value,
    size_t size) {
  
  svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JWTSVID.svid)
}
inline std::string* JWTSVID::_internal_mutable_svid() {
  
  return svid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JWTSVID::release_svid() {
  // @@protoc_insertion_point(field_release:JWTSVID.svid)
  return svid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JWTSVID::set_allocated_svid(std::string* svid) {
  if (svid != nullptr) {
    
  } else {
    
  }
  svid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), svid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JWTSVID.svid)
}

// -------------------------------------------------------------------

// JWTSVIDRequest

// repeated string audience = 1;
inline int JWTSVIDRequest::_internal_audience_size() const {
  return audience_.size();
}
inline int JWTSVIDRequest::audience_size() const {
  return _internal_audience_size();
}
inline void JWTSVIDRequest::clear_audience() {
  audience_.Clear();
}
inline std::string* JWTSVIDRequest::add_audience() {
  // @@protoc_insertion_point(field_add_mutable:JWTSVIDRequest.audience)
  return _internal_add_audience();
}
inline const std::string& JWTSVIDRequest::_internal_audience(int index) const {
  return audience_.Get(index);
}
inline const std::string& JWTSVIDRequest::audience(int index) const {
  // @@protoc_insertion_point(field_get:JWTSVIDRequest.audience)
  return _internal_audience(index);
}
inline std::string* JWTSVIDRequest::mutable_audience(int index) {
  // @@protoc_insertion_point(field_mutable:JWTSVIDRequest.audience)
  return audience_.Mutable(index);
}
inline void JWTSVIDRequest::set_audience(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:JWTSVIDRequest.audience)
  audience_.Mutable(index)->assign(value);
}
inline void JWTSVIDRequest::set_audience(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:JWTSVIDRequest.audience)
  audience_.Mutable(index)->assign(std::move(value));
}
inline void JWTSVIDRequest::set_audience(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audience_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:JWTSVIDRequest.audience)
}
inline void JWTSVIDRequest::set_audience(int index, const char* value, size_t size) {
  audience_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:JWTSVIDRequest.audience)
}
inline std::string* JWTSVIDRequest::_internal_add_audience() {
  return audience_.Add();
}
inline void JWTSVIDRequest::add_audience(const std::string& value) {
  audience_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:JWTSVIDRequest.audience)
}
inline void JWTSVIDRequest::add_audience(std::string&& value) {
  audience_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:JWTSVIDRequest.audience)
}
inline void JWTSVIDRequest::add_audience(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audience_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:JWTSVIDRequest.audience)
}
inline void JWTSVIDRequest::add_audience(const char* value, size_t size) {
  audience_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:JWTSVIDRequest.audience)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JWTSVIDRequest::audience() const {
  // @@protoc_insertion_point(field_list:JWTSVIDRequest.audience)
  return audience_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JWTSVIDRequest::mutable_audience() {
  // @@protoc_insertion_point(field_mutable_list:JWTSVIDRequest.audience)
  return &audience_;
}

// string spiffe_id = 2;
inline void JWTSVIDRequest::clear_spiffe_id() {
  spiffe_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JWTSVIDRequest::spiffe_id() const {
  // @@protoc_insertion_point(field_get:JWTSVIDRequest.spiffe_id)
  return _internal_spiffe_id();
}
inline void JWTSVIDRequest::set_spiffe_id(const std::string& value) {
  _internal_set_spiffe_id(value);
  // @@protoc_insertion_point(field_set:JWTSVIDRequest.spiffe_id)
}
inline std::string* JWTSVIDRequest::mutable_spiffe_id() {
  // @@protoc_insertion_point(field_mutable:JWTSVIDRequest.spiffe_id)
  return _internal_mutable_spiffe_id();
}
inline const std::string& JWTSVIDRequest::_internal_spiffe_id() const {
  return spiffe_id_.Get();
}
inline void JWTSVIDRequest::_internal_set_spiffe_id(const std::string& value) {
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JWTSVIDRequest::set_spiffe_id(std::string&& value) {
  
  spiffe_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JWTSVIDRequest.spiffe_id)
}
inline void JWTSVIDRequest::set_spiffe_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:JWTSVIDRequest.spiffe_id)
}
inline void JWTSVIDRequest::set_spiffe_id(const char* value,
    size_t size) {
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JWTSVIDRequest.spiffe_id)
}
inline std::string* JWTSVIDRequest::_internal_mutable_spiffe_id() {
  
  return spiffe_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JWTSVIDRequest::release_spiffe_id() {
  // @@protoc_insertion_point(field_release:JWTSVIDRequest.spiffe_id)
  return spiffe_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JWTSVIDRequest::set_allocated_spiffe_id(std::string* spiffe_id) {
  if (spiffe_id != nullptr) {
    
  } else {
    
  }
  spiffe_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spiffe_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JWTSVIDRequest.spiffe_id)
}

// -------------------------------------------------------------------

// JWTSVIDResponse

// repeated .JWTSVID svids = 1;
inline int JWTSVIDResponse::_internal_svids_size() const {
  return svids_.size();
}
inline int JWTSVIDResponse::svids_size() const {
  return _internal_svids_size();
}
inline void JWTSVIDResponse::clear_svids() {
  svids_.Clear();
}
inline ::JWTSVID* JWTSVIDResponse::mutable_svids(int index) {
  // @@protoc_insertion_point(field_mutable:JWTSVIDResponse.svids)
  return svids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JWTSVID >*
JWTSVIDResponse::mutable_svids() {
  // @@protoc_insertion_point(field_mutable_list:JWTSVIDResponse.svids)
  return &svids_;
}
inline const ::JWTSVID& JWTSVIDResponse::_internal_svids(int index) const {
  return svids_.Get(index);
}
inline const ::JWTSVID& JWTSVIDResponse::svids(int index) const {
  // @@protoc_insertion_point(field_get:JWTSVIDResponse.svids)
  return _internal_svids(index);
}
inline ::JWTSVID* JWTSVIDResponse::_internal_add_svids() {
  return svids_.Add();
}
inline ::JWTSVID* JWTSVIDResponse::add_svids() {
  // @@protoc_insertion_point(field_add:JWTSVIDResponse.svids)
  return _internal_add_svids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JWTSVID >&
JWTSVIDResponse::svids() const {
  // @@protoc_insertion_point(field_list:JWTSVIDResponse.svids)
  return svids_;
}

// -------------------------------------------------------------------

// JWTBundlesRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// JWTBundlesResponse

// map<string, bytes> bundles = 1;
inline int JWTBundlesResponse::_internal_bundles_size() const {
  return bundles_.size();
}
inline int JWTBundlesResponse::bundles_size() const {
  return _internal_bundles_size();
}
inline void JWTBundlesResponse::clear_bundles() {
  bundles_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
JWTBundlesResponse::_internal_bundles() const {
  return bundles_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
JWTBundlesResponse::bundles() const {
  // @@protoc_insertion_point(field_map:JWTBundlesResponse.bundles)
  return _internal_bundles();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
JWTBundlesResponse::_internal_mutable_bundles() {
  return bundles_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
JWTBundlesResponse::mutable_bundles() {
  // @@protoc_insertion_point(field_mutable_map:JWTBundlesResponse.bundles)
  return _internal_mutable_bundles();
}

// -------------------------------------------------------------------

// ValidateJWTSVIDRequest

// string audience = 1;
inline void ValidateJWTSVIDRequest::clear_audience() {
  audience_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateJWTSVIDRequest::audience() const {
  // @@protoc_insertion_point(field_get:ValidateJWTSVIDRequest.audience)
  return _internal_audience();
}
inline void ValidateJWTSVIDRequest::set_audience(const std::string& value) {
  _internal_set_audience(value);
  // @@protoc_insertion_point(field_set:ValidateJWTSVIDRequest.audience)
}
inline std::string* ValidateJWTSVIDRequest::mutable_audience() {
  // @@protoc_insertion_point(field_mutable:ValidateJWTSVIDRequest.audience)
  return _internal_mutable_audience();
}
inline const std::string& ValidateJWTSVIDRequest::_internal_audience() const {
  return audience_.Get();
}
inline void ValidateJWTSVIDRequest::_internal_set_audience(const std::string& value) {
  
  audience_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateJWTSVIDRequest::set_audience(std::string&& value) {
  
  audience_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ValidateJWTSVIDRequest.audience)
}
inline void ValidateJWTSVIDRequest::set_audience(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audience_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ValidateJWTSVIDRequest.audience)
}
inline void ValidateJWTSVIDRequest::set_audience(const char* value,
    size_t size) {
  
  audience_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ValidateJWTSVIDRequest.audience)
}
inline std::string* ValidateJWTSVIDRequest::_internal_mutable_audience() {
  
  return audience_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateJWTSVIDRequest::release_audience() {
  // @@protoc_insertion_point(field_release:ValidateJWTSVIDRequest.audience)
  return audience_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateJWTSVIDRequest::set_allocated_audience(std::string* audience) {
  if (audience != nullptr) {
    
  } else {
    
  }
  audience_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audience,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ValidateJWTSVIDRequest.audience)
}

// string svid = 2;
inline void ValidateJWTSVIDRequest::clear_svid() {
  svid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateJWTSVIDRequest::svid() const {
  // @@protoc_insertion_point(field_get:ValidateJWTSVIDRequest.svid)
  return _internal_svid();
}
inline void ValidateJWTSVIDRequest::set_svid(const std::string& value) {
  _internal_set_svid(value);
  // @@protoc_insertion_point(field_set:ValidateJWTSVIDRequest.svid)
}
inline std::string* ValidateJWTSVIDRequest::mutable_svid() {
  // @@protoc_insertion_point(field_mutable:ValidateJWTSVIDRequest.svid)
  return _internal_mutable_svid();
}
inline const std::string& ValidateJWTSVIDRequest::_internal_svid() const {
  return svid_.Get();
}
inline void ValidateJWTSVIDRequest::_internal_set_svid(const std::string& value) {
  
  svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateJWTSVIDRequest::set_svid(std::string&& value) {
  
  svid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ValidateJWTSVIDRequest.svid)
}
inline void ValidateJWTSVIDRequest::set_svid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ValidateJWTSVIDRequest.svid)
}
inline void ValidateJWTSVIDRequest::set_svid(const char* value,
    size_t size) {
  
  svid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ValidateJWTSVIDRequest.svid)
}
inline std::string* ValidateJWTSVIDRequest::_internal_mutable_svid() {
  
  return svid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateJWTSVIDRequest::release_svid() {
  // @@protoc_insertion_point(field_release:ValidateJWTSVIDRequest.svid)
  return svid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateJWTSVIDRequest::set_allocated_svid(std::string* svid) {
  if (svid != nullptr) {
    
  } else {
    
  }
  svid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), svid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ValidateJWTSVIDRequest.svid)
}

// -------------------------------------------------------------------

// ValidateJWTSVIDResponse

// string spiffe_id = 1;
inline void ValidateJWTSVIDResponse::clear_spiffe_id() {
  spiffe_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateJWTSVIDResponse::spiffe_id() const {
  // @@protoc_insertion_point(field_get:ValidateJWTSVIDResponse.spiffe_id)
  return _internal_spiffe_id();
}
inline void ValidateJWTSVIDResponse::set_spiffe_id(const std::string& value) {
  _internal_set_spiffe_id(value);
  // @@protoc_insertion_point(field_set:ValidateJWTSVIDResponse.spiffe_id)
}
inline std::string* ValidateJWTSVIDResponse::mutable_spiffe_id() {
  // @@protoc_insertion_point(field_mutable:ValidateJWTSVIDResponse.spiffe_id)
  return _internal_mutable_spiffe_id();
}
inline const std::string& ValidateJWTSVIDResponse::_internal_spiffe_id() const {
  return spiffe_id_.Get();
}
inline void ValidateJWTSVIDResponse::_internal_set_spiffe_id(const std::string& value) {
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateJWTSVIDResponse::set_spiffe_id(std::string&& value) {
  
  spiffe_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ValidateJWTSVIDResponse.spiffe_id)
}
inline void ValidateJWTSVIDResponse::set_spiffe_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ValidateJWTSVIDResponse.spiffe_id)
}
inline void ValidateJWTSVIDResponse::set_spiffe_id(const char* value,
    size_t size) {
  
  spiffe_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ValidateJWTSVIDResponse.spiffe_id)
}
inline std::string* ValidateJWTSVIDResponse::_internal_mutable_spiffe_id() {
  
  return spiffe_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateJWTSVIDResponse::release_spiffe_id() {
  // @@protoc_insertion_point(field_release:ValidateJWTSVIDResponse.spiffe_id)
  return spiffe_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateJWTSVIDResponse::set_allocated_spiffe_id(std::string* spiffe_id) {
  if (spiffe_id != nullptr) {
    
  } else {
    
  }
  spiffe_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spiffe_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ValidateJWTSVIDResponse.spiffe_id)
}

// .google.protobuf.Struct claims = 2;
inline bool ValidateJWTSVIDResponse::_internal_has_claims() const {
  return this != internal_default_instance() && claims_ != nullptr;
}
inline bool ValidateJWTSVIDResponse::has_claims() const {
  return _internal_has_claims();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ValidateJWTSVIDResponse::_internal_claims() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = claims_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ValidateJWTSVIDResponse::claims() const {
  // @@protoc_insertion_point(field_get:ValidateJWTSVIDResponse.claims)
  return _internal_claims();
}
inline void ValidateJWTSVIDResponse::unsafe_arena_set_allocated_claims(
    PROTOBUF_NAMESPACE_ID::Struct* claims) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(claims_);
  }
  claims_ = claims;
  if (claims) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ValidateJWTSVIDResponse.claims)
}
inline PROTOBUF_NAMESPACE_ID::Struct* ValidateJWTSVIDResponse::release_claims() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = claims_;
  claims_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ValidateJWTSVIDResponse::unsafe_arena_release_claims() {
  // @@protoc_insertion_point(field_release:ValidateJWTSVIDResponse.claims)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = claims_;
  claims_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ValidateJWTSVIDResponse::_internal_mutable_claims() {
  
  if (claims_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    claims_ = p;
  }
  return claims_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ValidateJWTSVIDResponse::mutable_claims() {
  // @@protoc_insertion_point(field_mutable:ValidateJWTSVIDResponse.claims)
  return _internal_mutable_claims();
}
inline void ValidateJWTSVIDResponse::set_allocated_claims(PROTOBUF_NAMESPACE_ID::Struct* claims) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(claims_);
  }
  if (claims) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(claims)->GetArena();
    if (message_arena != submessage_arena) {
      claims = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claims, submessage_arena);
    }
    
  } else {
    
  }
  claims_ = claims;
  // @@protoc_insertion_point(field_set_allocated:ValidateJWTSVIDResponse.claims)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_workload_2eproto
