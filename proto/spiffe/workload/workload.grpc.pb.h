// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: workload.proto
#ifndef GRPC_workload_2eproto__INCLUDED
#define GRPC_workload_2eproto__INCLUDED

#include "workload.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class SpiffeWorkloadAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "SpiffeWorkloadAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // JWT-SVID Profile
    virtual ::grpc::Status FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::JWTSVIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>> AsyncFetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>>(AsyncFetchJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>> PrepareAsyncFetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>>(PrepareAsyncFetchJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::JWTBundlesResponse>> FetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::JWTBundlesResponse>>(FetchJWTBundlesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>> AsyncFetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>>(AsyncFetchJWTBundlesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>> PrepareAsyncFetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>>(PrepareAsyncFetchJWTBundlesRaw(context, request, cq));
    }
    virtual ::grpc::Status ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::ValidateJWTSVIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>> AsyncValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>>(AsyncValidateJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>> PrepareAsyncValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>>(PrepareAsyncValidateJWTSVIDRaw(context, request, cq));
    }
    // X.509-SVID Profile
    // Fetch all SPIFFE identities the workload is entitled to, as
    // well as related information like trust bundles and CRLs. As
    // this information changes, subsequent messages will be sent.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::X509SVIDResponse>> FetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::X509SVIDResponse>>(FetchX509SVIDRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>> AsyncFetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>>(AsyncFetchX509SVIDRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>> PrepareAsyncFetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>>(PrepareAsyncFetchX509SVIDRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // JWT-SVID Profile
      virtual void FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FetchJWTBundles(::grpc::ClientContext* context, ::JWTBundlesRequest* request, ::grpc::ClientReadReactor< ::JWTBundlesResponse>* reactor) = 0;
      #else
      virtual void FetchJWTBundles(::grpc::ClientContext* context, ::JWTBundlesRequest* request, ::grpc::experimental::ClientReadReactor< ::JWTBundlesResponse>* reactor) = 0;
      #endif
      virtual void ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // X.509-SVID Profile
      // Fetch all SPIFFE identities the workload is entitled to, as
      // well as related information like trust bundles and CRLs. As
      // this information changes, subsequent messages will be sent.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FetchX509SVID(::grpc::ClientContext* context, ::X509SVIDRequest* request, ::grpc::ClientReadReactor< ::X509SVIDResponse>* reactor) = 0;
      #else
      virtual void FetchX509SVID(::grpc::ClientContext* context, ::X509SVIDRequest* request, ::grpc::experimental::ClientReadReactor< ::X509SVIDResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>* AsyncFetchJWTSVIDRaw(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>* PrepareAsyncFetchJWTSVIDRaw(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::JWTBundlesResponse>* FetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>* AsyncFetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>* PrepareAsyncFetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>* AsyncValidateJWTSVIDRaw(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>* PrepareAsyncValidateJWTSVIDRaw(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::X509SVIDResponse>* FetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>* AsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>* PrepareAsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::JWTSVIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>> AsyncFetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>>(AsyncFetchJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>> PrepareAsyncFetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>>(PrepareAsyncFetchJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::JWTBundlesResponse>> FetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::JWTBundlesResponse>>(FetchJWTBundlesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::JWTBundlesResponse>> AsyncFetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::JWTBundlesResponse>>(AsyncFetchJWTBundlesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::JWTBundlesResponse>> PrepareAsyncFetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::JWTBundlesResponse>>(PrepareAsyncFetchJWTBundlesRaw(context, request, cq));
    }
    ::grpc::Status ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::ValidateJWTSVIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>> AsyncValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>>(AsyncValidateJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>> PrepareAsyncValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>>(PrepareAsyncValidateJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::X509SVIDResponse>> FetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::X509SVIDResponse>>(FetchX509SVIDRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::X509SVIDResponse>> AsyncFetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::X509SVIDResponse>>(AsyncFetchX509SVIDRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::X509SVIDResponse>> PrepareAsyncFetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::X509SVIDResponse>>(PrepareAsyncFetchX509SVIDRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FetchJWTBundles(::grpc::ClientContext* context, ::JWTBundlesRequest* request, ::grpc::ClientReadReactor< ::JWTBundlesResponse>* reactor) override;
      #else
      void FetchJWTBundles(::grpc::ClientContext* context, ::JWTBundlesRequest* request, ::grpc::experimental::ClientReadReactor< ::JWTBundlesResponse>* reactor) override;
      #endif
      void ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FetchX509SVID(::grpc::ClientContext* context, ::X509SVIDRequest* request, ::grpc::ClientReadReactor< ::X509SVIDResponse>* reactor) override;
      #else
      void FetchX509SVID(::grpc::ClientContext* context, ::X509SVIDRequest* request, ::grpc::experimental::ClientReadReactor< ::X509SVIDResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>* AsyncFetchJWTSVIDRaw(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>* PrepareAsyncFetchJWTSVIDRaw(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::JWTBundlesResponse>* FetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request) override;
    ::grpc::ClientAsyncReader< ::JWTBundlesResponse>* AsyncFetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::JWTBundlesResponse>* PrepareAsyncFetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>* AsyncValidateJWTSVIDRaw(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>* PrepareAsyncValidateJWTSVIDRaw(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::X509SVIDResponse>* FetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request) override;
    ::grpc::ClientAsyncReader< ::X509SVIDResponse>* AsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::X509SVIDResponse>* PrepareAsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FetchJWTSVID_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchJWTBundles_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateJWTSVID_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchX509SVID_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // JWT-SVID Profile
    virtual ::grpc::Status FetchJWTSVID(::grpc::ServerContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response);
    virtual ::grpc::Status FetchJWTBundles(::grpc::ServerContext* context, const ::JWTBundlesRequest* request, ::grpc::ServerWriter< ::JWTBundlesResponse>* writer);
    virtual ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response);
    // X.509-SVID Profile
    // Fetch all SPIFFE identities the workload is entitled to, as
    // well as related information like trust bundles and CRLs. As
    // this information changes, subsequent messages will be sent.
    virtual ::grpc::Status FetchX509SVID(::grpc::ServerContext* context, const ::X509SVIDRequest* request, ::grpc::ServerWriter< ::X509SVIDResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchJWTSVID() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchJWTSVID(::grpc::ServerContext* context, ::JWTSVIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::JWTSVIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchJWTBundles() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchJWTBundles(::grpc::ServerContext* context, ::JWTBundlesRequest* request, ::grpc::ServerAsyncWriter< ::JWTBundlesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateJWTSVID() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateJWTSVID(::grpc::ServerContext* context, ::ValidateJWTSVIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::ValidateJWTSVIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchX509SVID() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchX509SVID(::grpc::ServerContext* context, ::X509SVIDRequest* request, ::grpc::ServerAsyncWriter< ::X509SVIDResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FetchJWTSVID<WithAsyncMethod_FetchJWTBundles<WithAsyncMethod_ValidateJWTSVID<WithAsyncMethod_FetchX509SVID<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FetchJWTSVID() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::JWTSVIDRequest, ::JWTSVIDResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response) { return this->FetchJWTSVID(context, request, response); }));}
    void SetMessageAllocatorFor_FetchJWTSVID(
        ::grpc::experimental::MessageAllocator< ::JWTSVIDRequest, ::JWTSVIDResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::JWTSVIDRequest, ::JWTSVIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FetchJWTSVID(
      ::grpc::CallbackServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FetchJWTSVID(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FetchJWTBundles() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::JWTBundlesRequest, ::JWTBundlesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::JWTBundlesRequest* request) { return this->FetchJWTBundles(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::JWTBundlesResponse>* FetchJWTBundles(
      ::grpc::CallbackServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::JWTBundlesResponse>* FetchJWTBundles(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateJWTSVID() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response) { return this->ValidateJWTSVID(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateJWTSVID(
        ::grpc::experimental::MessageAllocator< ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateJWTSVID(
      ::grpc::CallbackServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateJWTSVID(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FetchX509SVID() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::X509SVIDRequest, ::X509SVIDResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::X509SVIDRequest* request) { return this->FetchX509SVID(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::X509SVIDResponse>* FetchX509SVID(
      ::grpc::CallbackServerContext* /*context*/, const ::X509SVIDRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::X509SVIDResponse>* FetchX509SVID(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::X509SVIDRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_FetchJWTSVID<ExperimentalWithCallbackMethod_FetchJWTBundles<ExperimentalWithCallbackMethod_ValidateJWTSVID<ExperimentalWithCallbackMethod_FetchX509SVID<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_FetchJWTSVID<ExperimentalWithCallbackMethod_FetchJWTBundles<ExperimentalWithCallbackMethod_ValidateJWTSVID<ExperimentalWithCallbackMethod_FetchX509SVID<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchJWTSVID() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchJWTBundles() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateJWTSVID() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchX509SVID() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchJWTSVID() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchJWTSVID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchJWTBundles() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchJWTBundles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateJWTSVID() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateJWTSVID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchX509SVID() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchX509SVID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchJWTSVID() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchJWTSVID(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FetchJWTSVID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FetchJWTSVID(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchJWTBundles() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FetchJWTBundles(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchJWTBundles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FetchJWTBundles(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateJWTSVID() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateJWTSVID(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateJWTSVID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateJWTSVID(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchX509SVID() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FetchX509SVID(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchX509SVID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FetchX509SVID(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchJWTSVID() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::JWTSVIDRequest, ::JWTSVIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::JWTSVIDRequest, ::JWTSVIDResponse>* streamer) {
                       return this->StreamedFetchJWTSVID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchJWTSVID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::JWTSVIDRequest,::JWTSVIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateJWTSVID() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>* streamer) {
                       return this->StreamedValidateJWTSVID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateJWTSVID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ValidateJWTSVIDRequest,::ValidateJWTSVIDResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FetchJWTSVID<WithStreamedUnaryMethod_ValidateJWTSVID<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchJWTBundles() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::JWTBundlesRequest, ::JWTBundlesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::JWTBundlesRequest, ::JWTBundlesResponse>* streamer) {
                       return this->StreamedFetchJWTBundles(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchJWTBundles(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::JWTBundlesRequest,::JWTBundlesResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchX509SVID() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::X509SVIDRequest, ::X509SVIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::X509SVIDRequest, ::X509SVIDResponse>* streamer) {
                       return this->StreamedFetchX509SVID(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchX509SVID(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::X509SVIDRequest,::X509SVIDResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FetchJWTBundles<WithSplitStreamingMethod_FetchX509SVID<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_FetchJWTSVID<WithSplitStreamingMethod_FetchJWTBundles<WithStreamedUnaryMethod_ValidateJWTSVID<WithSplitStreamingMethod_FetchX509SVID<Service > > > > StreamedService;
};


#endif  // GRPC_workload_2eproto__INCLUDED
